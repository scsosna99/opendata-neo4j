/*
 * Transport for London Unified API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.tfl.api.client.client.api;

import uk.gov.tfl.api.client.client.ApiCallback;
import uk.gov.tfl.api.client.client.ApiClient;
import uk.gov.tfl.api.client.client.ApiException;
import uk.gov.tfl.api.client.client.ApiResponse;
import uk.gov.tfl.api.client.client.Configuration;
import uk.gov.tfl.api.client.client.Pair;
import uk.gov.tfl.api.client.client.ProgressRequestBody;
import uk.gov.tfl.api.client.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.tfl.api.client.client.model.Disruption;
import uk.gov.tfl.api.client.client.model.Line;
import uk.gov.tfl.api.client.client.model.Mode;
import org.threeten.bp.OffsetDateTime;
import uk.gov.tfl.api.client.client.model.Prediction;
import uk.gov.tfl.api.client.client.model.RouteSearchResponse;
import uk.gov.tfl.api.client.client.model.RouteSequence;
import uk.gov.tfl.api.client.client.model.StatusSeverity;
import uk.gov.tfl.api.client.client.model.StopPoint;
import uk.gov.tfl.api.client.client.model.TimetableResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LineApi {
    private ApiClient apiClient;

    public LineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LineApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for lineArrivals
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param stopPointId Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param direction Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)
     * @param destinationStationId Optional. Id of destination stop (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineArrivalsCall(List<String> ids, String stopPointId, String direction, String destinationStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}/Arrivals/{stopPointId}"
            .replaceAll("\\{" + "ids" + "\\}", apiClient.escapeString(ids.toString()))
            .replaceAll("\\{" + "stopPointId" + "\\}", apiClient.escapeString(stopPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));
        if (destinationStationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("destinationStationId", destinationStationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineArrivalsValidateBeforeCall(List<String> ids, String stopPointId, String direction, String destinationStationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineArrivals(Async)");
        }
        
        // verify the required parameter 'stopPointId' is set
        if (stopPointId == null) {
            throw new ApiException("Missing the required parameter 'stopPointId' when calling lineArrivals(Async)");
        }
        

        com.squareup.okhttp.Call call = lineArrivalsCall(ids, stopPointId, direction, destinationStationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get the list of arrival predictions for given line ids based at the given stop
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param stopPointId Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param direction Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)
     * @param destinationStationId Optional. Id of destination stop (optional)
     * @return List&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Prediction> lineArrivals(List<String> ids, String stopPointId, String direction, String destinationStationId) throws ApiException {
        ApiResponse<List<Prediction>> resp = lineArrivalsWithHttpInfo(ids, stopPointId, direction, destinationStationId);
        return resp.getData();
    }

    /**
     * Get the list of arrival predictions for given line ids based at the given stop
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param stopPointId Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param direction Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)
     * @param destinationStationId Optional. Id of destination stop (optional)
     * @return ApiResponse&lt;List&lt;Prediction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Prediction>> lineArrivalsWithHttpInfo(List<String> ids, String stopPointId, String direction, String destinationStationId) throws ApiException {
        com.squareup.okhttp.Call call = lineArrivalsValidateBeforeCall(ids, stopPointId, direction, destinationStationId, null, null);
        Type localVarReturnType = new TypeToken<List<Prediction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of arrival predictions for given line ids based at the given stop (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param stopPointId Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param direction Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all (optional)
     * @param destinationStationId Optional. Id of destination stop (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineArrivalsAsync(List<String> ids, String stopPointId, String direction, String destinationStationId, final ApiCallback<List<Prediction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineArrivalsValidateBeforeCall(ids, stopPointId, direction, destinationStationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Prediction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineDisruption
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineDisruptionCall(List<String> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}/Disruption"
            .replaceAll("\\{" + "ids" + "\\}", apiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineDisruptionValidateBeforeCall(List<String> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineDisruption(Async)");
        }
        

        com.squareup.okhttp.Call call = lineDisruptionCall(ids, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get disruptions for the given line ids
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @return List&lt;Disruption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Disruption> lineDisruption(List<String> ids) throws ApiException {
        ApiResponse<List<Disruption>> resp = lineDisruptionWithHttpInfo(ids);
        return resp.getData();
    }

    /**
     * Get disruptions for the given line ids
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @return ApiResponse&lt;List&lt;Disruption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Disruption>> lineDisruptionWithHttpInfo(List<String> ids) throws ApiException {
        com.squareup.okhttp.Call call = lineDisruptionValidateBeforeCall(ids, null, null);
        Type localVarReturnType = new TypeToken<List<Disruption>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get disruptions for the given line ids (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineDisruptionAsync(List<String> ids, final ApiCallback<List<Disruption>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineDisruptionValidateBeforeCall(ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Disruption>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineDisruptionByMode
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineDisruptionByModeCall(List<String> modes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Mode/{modes}/Disruption"
            .replaceAll("\\{" + "modes" + "\\}", apiClient.escapeString(modes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineDisruptionByModeValidateBeforeCall(List<String> modes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modes' is set
        if (modes == null) {
            throw new ApiException("Missing the required parameter 'modes' when calling lineDisruptionByMode(Async)");
        }
        

        com.squareup.okhttp.Call call = lineDisruptionByModeCall(modes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get disruptions for all lines of the given modes.
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @return List&lt;Disruption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Disruption> lineDisruptionByMode(List<String> modes) throws ApiException {
        ApiResponse<List<Disruption>> resp = lineDisruptionByModeWithHttpInfo(modes);
        return resp.getData();
    }

    /**
     * Get disruptions for all lines of the given modes.
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @return ApiResponse&lt;List&lt;Disruption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Disruption>> lineDisruptionByModeWithHttpInfo(List<String> modes) throws ApiException {
        com.squareup.okhttp.Call call = lineDisruptionByModeValidateBeforeCall(modes, null, null);
        Type localVarReturnType = new TypeToken<List<Disruption>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get disruptions for all lines of the given modes. (asynchronously)
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineDisruptionByModeAsync(List<String> modes, final ApiCallback<List<Disruption>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineDisruptionByModeValidateBeforeCall(modes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Disruption>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineGet
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineGetCall(List<String> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}"
            .replaceAll("\\{" + "ids" + "\\}", apiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineGetValidateBeforeCall(List<String> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineGet(Async)");
        }
        

        com.squareup.okhttp.Call call = lineGetCall(ids, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets lines that match the specified line ids.
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @return List&lt;Line&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Line> lineGet(List<String> ids) throws ApiException {
        ApiResponse<List<Line>> resp = lineGetWithHttpInfo(ids);
        return resp.getData();
    }

    /**
     * Gets lines that match the specified line ids.
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @return ApiResponse&lt;List&lt;Line&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Line>> lineGetWithHttpInfo(List<String> ids) throws ApiException {
        com.squareup.okhttp.Call call = lineGetValidateBeforeCall(ids, null, null);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets lines that match the specified line ids. (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineGetAsync(List<String> ids, final ApiCallback<List<Line>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineGetValidateBeforeCall(ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineGetByMode
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineGetByModeCall(List<String> modes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Mode/{modes}"
            .replaceAll("\\{" + "modes" + "\\}", apiClient.escapeString(modes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineGetByModeValidateBeforeCall(List<String> modes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modes' is set
        if (modes == null) {
            throw new ApiException("Missing the required parameter 'modes' when calling lineGetByMode(Async)");
        }
        

        com.squareup.okhttp.Call call = lineGetByModeCall(modes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets lines that serve the given modes.
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @return List&lt;Line&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Line> lineGetByMode(List<String> modes) throws ApiException {
        ApiResponse<List<Line>> resp = lineGetByModeWithHttpInfo(modes);
        return resp.getData();
    }

    /**
     * Gets lines that serve the given modes.
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @return ApiResponse&lt;List&lt;Line&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Line>> lineGetByModeWithHttpInfo(List<String> modes) throws ApiException {
        com.squareup.okhttp.Call call = lineGetByModeValidateBeforeCall(modes, null, null);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets lines that serve the given modes. (asynchronously)
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineGetByModeAsync(List<String> modes, final ApiCallback<List<Line>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineGetByModeValidateBeforeCall(modes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineLineRoutesByIds
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineLineRoutesByIdsCall(List<String> ids, List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}/Route"
            .replaceAll("\\{" + "ids" + "\\}", apiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineLineRoutesByIdsValidateBeforeCall(List<String> ids, List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineLineRoutesByIds(Async)");
        }
        

        com.squareup.okhttp.Call call = lineLineRoutesByIdsCall(ids, serviceTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return List&lt;Line&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Line> lineLineRoutesByIds(List<String> ids, List<String> serviceTypes) throws ApiException {
        ApiResponse<List<Line>> resp = lineLineRoutesByIdsWithHttpInfo(ids, serviceTypes);
        return resp.getData();
    }

    /**
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return ApiResponse&lt;List&lt;Line&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Line>> lineLineRoutesByIdsWithHttpInfo(List<String> ids, List<String> serviceTypes) throws ApiException {
        com.squareup.okhttp.Call call = lineLineRoutesByIdsValidateBeforeCall(ids, serviceTypes, null, null);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route. (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineLineRoutesByIdsAsync(List<String> ids, List<String> serviceTypes, final ApiCallback<List<Line>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineLineRoutesByIdsValidateBeforeCall(ids, serviceTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineMetaDisruptionCategories
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineMetaDisruptionCategoriesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Meta/DisruptionCategories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineMetaDisruptionCategoriesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = lineMetaDisruptionCategoriesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of valid disruption categories
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> lineMetaDisruptionCategories() throws ApiException {
        ApiResponse<List<String>> resp = lineMetaDisruptionCategoriesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets a list of valid disruption categories
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> lineMetaDisruptionCategoriesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lineMetaDisruptionCategoriesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of valid disruption categories (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineMetaDisruptionCategoriesAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineMetaDisruptionCategoriesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineMetaModes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineMetaModesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Meta/Modes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineMetaModesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = lineMetaModesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of valid modes
     * 
     * @return List&lt;Mode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Mode> lineMetaModes() throws ApiException {
        ApiResponse<List<Mode>> resp = lineMetaModesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets a list of valid modes
     * 
     * @return ApiResponse&lt;List&lt;Mode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Mode>> lineMetaModesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lineMetaModesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Mode>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of valid modes (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineMetaModesAsync(final ApiCallback<List<Mode>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineMetaModesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Mode>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineMetaServiceTypes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineMetaServiceTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Meta/ServiceTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineMetaServiceTypesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = lineMetaServiceTypesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of valid ServiceTypes to filter on
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> lineMetaServiceTypes() throws ApiException {
        ApiResponse<List<String>> resp = lineMetaServiceTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets a list of valid ServiceTypes to filter on
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> lineMetaServiceTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lineMetaServiceTypesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of valid ServiceTypes to filter on (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineMetaServiceTypesAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineMetaServiceTypesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineMetaSeverity
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineMetaSeverityCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Meta/Severity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineMetaSeverityValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = lineMetaSeverityCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of valid severity codes
     * 
     * @return List&lt;StatusSeverity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StatusSeverity> lineMetaSeverity() throws ApiException {
        ApiResponse<List<StatusSeverity>> resp = lineMetaSeverityWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets a list of valid severity codes
     * 
     * @return ApiResponse&lt;List&lt;StatusSeverity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StatusSeverity>> lineMetaSeverityWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = lineMetaSeverityValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<StatusSeverity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of valid severity codes (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineMetaSeverityAsync(final ApiCallback<List<StatusSeverity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineMetaSeverityValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StatusSeverity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineRoute
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineRouteCall(List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Route";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineRouteValidateBeforeCall(List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = lineRouteCall(serviceTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     * 
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return List&lt;Line&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Line> lineRoute(List<String> serviceTypes) throws ApiException {
        ApiResponse<List<Line>> resp = lineRouteWithHttpInfo(serviceTypes);
        return resp.getData();
    }

    /**
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.
     * 
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return ApiResponse&lt;List&lt;Line&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Line>> lineRouteWithHttpInfo(List<String> serviceTypes) throws ApiException {
        com.squareup.okhttp.Call call = lineRouteValidateBeforeCall(serviceTypes, null, null);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route. (asynchronously)
     * 
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineRouteAsync(List<String> serviceTypes, final ApiCallback<List<Line>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineRouteValidateBeforeCall(serviceTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineRouteByMode
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineRouteByModeCall(List<String> modes, List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Mode/{modes}/Route"
            .replaceAll("\\{" + "modes" + "\\}", apiClient.escapeString(modes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineRouteByModeValidateBeforeCall(List<String> modes, List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modes' is set
        if (modes == null) {
            throw new ApiException("Missing the required parameter 'modes' when calling lineRouteByMode(Async)");
        }
        

        com.squareup.okhttp.Call call = lineRouteByModeCall(modes, serviceTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return List&lt;Line&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Line> lineRouteByMode(List<String> modes, List<String> serviceTypes) throws ApiException {
        ApiResponse<List<Line>> resp = lineRouteByModeWithHttpInfo(modes, serviceTypes);
        return resp.getData();
    }

    /**
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return ApiResponse&lt;List&lt;Line&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Line>> lineRouteByModeWithHttpInfo(List<String> modes, List<String> serviceTypes) throws ApiException {
        com.squareup.okhttp.Call call = lineRouteByModeValidateBeforeCall(modes, serviceTypes, null, null);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route (asynchronously)
     * 
     * @param modes A comma-separated list of modes e.g. tube,dlr (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineRouteByModeAsync(List<String> modes, List<String> serviceTypes, final ApiCallback<List<Line>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineRouteByModeValidateBeforeCall(modes, serviceTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineRouteSequence
     * @param id A single line id e.g. victoria (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param excludeCrowding That excludes crowding from line disruptions. Can be true or false. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineRouteSequenceCall(String id, String direction, List<String> serviceTypes, Boolean excludeCrowding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{id}/Route/Sequence/{direction}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "direction" + "\\}", apiClient.escapeString(direction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));
        if (excludeCrowding != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("excludeCrowding", excludeCrowding));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineRouteSequenceValidateBeforeCall(String id, String direction, List<String> serviceTypes, Boolean excludeCrowding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lineRouteSequence(Async)");
        }
        
        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling lineRouteSequence(Async)");
        }
        

        com.squareup.okhttp.Call call = lineRouteSequenceCall(id, direction, serviceTypes, excludeCrowding, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all valid routes for given line id, including the sequence of stops on each route.
     * 
     * @param id A single line id e.g. victoria (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param excludeCrowding That excludes crowding from line disruptions. Can be true or false. (optional)
     * @return RouteSequence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RouteSequence lineRouteSequence(String id, String direction, List<String> serviceTypes, Boolean excludeCrowding) throws ApiException {
        ApiResponse<RouteSequence> resp = lineRouteSequenceWithHttpInfo(id, direction, serviceTypes, excludeCrowding);
        return resp.getData();
    }

    /**
     * Gets all valid routes for given line id, including the sequence of stops on each route.
     * 
     * @param id A single line id e.g. victoria (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param excludeCrowding That excludes crowding from line disruptions. Can be true or false. (optional)
     * @return ApiResponse&lt;RouteSequence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RouteSequence> lineRouteSequenceWithHttpInfo(String id, String direction, List<String> serviceTypes, Boolean excludeCrowding) throws ApiException {
        com.squareup.okhttp.Call call = lineRouteSequenceValidateBeforeCall(id, direction, serviceTypes, excludeCrowding, null, null);
        Type localVarReturnType = new TypeToken<RouteSequence>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all valid routes for given line id, including the sequence of stops on each route. (asynchronously)
     * 
     * @param id A single line id e.g. victoria (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param excludeCrowding That excludes crowding from line disruptions. Can be true or false. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineRouteSequenceAsync(String id, String direction, List<String> serviceTypes, Boolean excludeCrowding, final ApiCallback<RouteSequence> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineRouteSequenceValidateBeforeCall(id, direction, serviceTypes, excludeCrowding, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteSequence>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineSearch
     * @param query Search term e.g victoria (required)
     * @param modes Optionally filter by the specified modes (optional)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineSearchCall(String query, List<String> modes, List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Search/{query}"
            .replaceAll("\\{" + "query" + "\\}", apiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "modes", modes));
        if (serviceTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineSearchValidateBeforeCall(String query, List<String> modes, List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling lineSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = lineSearchCall(query, modes, serviceTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search for lines or routes matching the query string
     * 
     * @param query Search term e.g victoria (required)
     * @param modes Optionally filter by the specified modes (optional)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return RouteSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RouteSearchResponse lineSearch(String query, List<String> modes, List<String> serviceTypes) throws ApiException {
        ApiResponse<RouteSearchResponse> resp = lineSearchWithHttpInfo(query, modes, serviceTypes);
        return resp.getData();
    }

    /**
     * Search for lines or routes matching the query string
     * 
     * @param query Search term e.g victoria (required)
     * @param modes Optionally filter by the specified modes (optional)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return ApiResponse&lt;RouteSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RouteSearchResponse> lineSearchWithHttpInfo(String query, List<String> modes, List<String> serviceTypes) throws ApiException {
        com.squareup.okhttp.Call call = lineSearchValidateBeforeCall(query, modes, serviceTypes, null, null);
        Type localVarReturnType = new TypeToken<RouteSearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for lines or routes matching the query string (asynchronously)
     * 
     * @param query Search term e.g victoria (required)
     * @param modes Optionally filter by the specified modes (optional)
     * @param serviceTypes A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineSearchAsync(String query, List<String> modes, List<String> serviceTypes, final ApiCallback<RouteSearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineSearchValidateBeforeCall(query, modes, serviceTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RouteSearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineStatus
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param dateRangeStartDate  (optional)
     * @param dateRangeEndDate  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineStatusCall(List<String> ids, String startDate, String endDate, Boolean detail, OffsetDateTime dateRangeStartDate, OffsetDateTime dateRangeEndDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}/Status/{StartDate}/to/{EndDate}"
            .replaceAll("\\{" + "ids" + "\\}", apiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (detail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("detail", detail));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (dateRangeStartDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateRange.startDate", dateRangeStartDate));
        if (dateRangeEndDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateRange.endDate", dateRangeEndDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineStatusValidateBeforeCall(List<String> ids, String startDate, String endDate, Boolean detail, OffsetDateTime dateRangeStartDate, OffsetDateTime dateRangeEndDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineStatus(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling lineStatus(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling lineStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = lineStatusCall(ids, startDate, endDate, detail, dateRangeStartDate, dateRangeEndDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the line status for given line ids during the provided dates e.g Minor Delays
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param dateRangeStartDate  (optional)
     * @param dateRangeEndDate  (optional)
     * @return List&lt;Line&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Line> lineStatus(List<String> ids, String startDate, String endDate, Boolean detail, OffsetDateTime dateRangeStartDate, OffsetDateTime dateRangeEndDate) throws ApiException {
        ApiResponse<List<Line>> resp = lineStatusWithHttpInfo(ids, startDate, endDate, detail, dateRangeStartDate, dateRangeEndDate);
        return resp.getData();
    }

    /**
     * Gets the line status for given line ids during the provided dates e.g Minor Delays
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param dateRangeStartDate  (optional)
     * @param dateRangeEndDate  (optional)
     * @return ApiResponse&lt;List&lt;Line&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Line>> lineStatusWithHttpInfo(List<String> ids, String startDate, String endDate, Boolean detail, OffsetDateTime dateRangeStartDate, OffsetDateTime dateRangeEndDate) throws ApiException {
        com.squareup.okhttp.Call call = lineStatusValidateBeforeCall(ids, startDate, endDate, detail, dateRangeStartDate, dateRangeEndDate, null, null);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the line status for given line ids during the provided dates e.g Minor Delays (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param startDate  (required)
     * @param endDate  (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param dateRangeStartDate  (optional)
     * @param dateRangeEndDate  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineStatusAsync(List<String> ids, String startDate, String endDate, Boolean detail, OffsetDateTime dateRangeStartDate, OffsetDateTime dateRangeEndDate, final ApiCallback<List<Line>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineStatusValidateBeforeCall(ids, startDate, endDate, detail, dateRangeStartDate, dateRangeEndDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineStatusByIds
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineStatusByIdsCall(List<String> ids, Boolean detail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{ids}/Status"
            .replaceAll("\\{" + "ids" + "\\}", apiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (detail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("detail", detail));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineStatusByIdsValidateBeforeCall(List<String> ids, Boolean detail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling lineStatusByIds(Async)");
        }
        

        com.squareup.okhttp.Call call = lineStatusByIdsCall(ids, detail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the line status of for given line ids e.g Minor Delays
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @return List&lt;Line&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Line> lineStatusByIds(List<String> ids, Boolean detail) throws ApiException {
        ApiResponse<List<Line>> resp = lineStatusByIdsWithHttpInfo(ids, detail);
        return resp.getData();
    }

    /**
     * Gets the line status of for given line ids e.g Minor Delays
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @return ApiResponse&lt;List&lt;Line&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Line>> lineStatusByIdsWithHttpInfo(List<String> ids, Boolean detail) throws ApiException {
        com.squareup.okhttp.Call call = lineStatusByIdsValidateBeforeCall(ids, detail, null, null);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the line status of for given line ids e.g Minor Delays (asynchronously)
     * 
     * @param ids A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineStatusByIdsAsync(List<String> ids, Boolean detail, final ApiCallback<List<Line>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineStatusByIdsValidateBeforeCall(ids, detail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineStatusByMode
     * @param modes A comma-separated list of modes to filter by. e.g. tube,dlr (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineStatusByModeCall(List<String> modes, Boolean detail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Mode/{modes}/Status"
            .replaceAll("\\{" + "modes" + "\\}", apiClient.escapeString(modes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (detail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("detail", detail));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineStatusByModeValidateBeforeCall(List<String> modes, Boolean detail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modes' is set
        if (modes == null) {
            throw new ApiException("Missing the required parameter 'modes' when calling lineStatusByMode(Async)");
        }
        

        com.squareup.okhttp.Call call = lineStatusByModeCall(modes, detail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the line status of for all lines for the given modes
     * 
     * @param modes A comma-separated list of modes to filter by. e.g. tube,dlr (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @return List&lt;Line&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Line> lineStatusByMode(List<String> modes, Boolean detail) throws ApiException {
        ApiResponse<List<Line>> resp = lineStatusByModeWithHttpInfo(modes, detail);
        return resp.getData();
    }

    /**
     * Gets the line status of for all lines for the given modes
     * 
     * @param modes A comma-separated list of modes to filter by. e.g. tube,dlr (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @return ApiResponse&lt;List&lt;Line&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Line>> lineStatusByModeWithHttpInfo(List<String> modes, Boolean detail) throws ApiException {
        com.squareup.okhttp.Call call = lineStatusByModeValidateBeforeCall(modes, detail, null, null);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the line status of for all lines for the given modes (asynchronously)
     * 
     * @param modes A comma-separated list of modes to filter by. e.g. tube,dlr (required)
     * @param detail Include details of the disruptions that are causing the line status including the affected stops and routes (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineStatusByModeAsync(List<String> modes, Boolean detail, final ApiCallback<List<Line>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineStatusByModeValidateBeforeCall(modes, detail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineStatusBySeverity
     * @param severity The level of severity (eg: a number from 0 to 14) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineStatusBySeverityCall(Integer severity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/Status/{severity}"
            .replaceAll("\\{" + "severity" + "\\}", apiClient.escapeString(severity.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineStatusBySeverityValidateBeforeCall(Integer severity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'severity' is set
        if (severity == null) {
            throw new ApiException("Missing the required parameter 'severity' when calling lineStatusBySeverity(Async)");
        }
        

        com.squareup.okhttp.Call call = lineStatusBySeverityCall(severity, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     * 
     * @param severity The level of severity (eg: a number from 0 to 14) (required)
     * @return List&lt;Line&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Line> lineStatusBySeverity(Integer severity) throws ApiException {
        ApiResponse<List<Line>> resp = lineStatusBySeverityWithHttpInfo(severity);
        return resp.getData();
    }

    /**
     * Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity
     * 
     * @param severity The level of severity (eg: a number from 0 to 14) (required)
     * @return ApiResponse&lt;List&lt;Line&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Line>> lineStatusBySeverityWithHttpInfo(Integer severity) throws ApiException {
        com.squareup.okhttp.Call call = lineStatusBySeverityValidateBeforeCall(severity, null, null);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the line status for all lines with a given severity              A list of valid severity codes can be obtained from a call to Line/Meta/Severity (asynchronously)
     * 
     * @param severity The level of severity (eg: a number from 0 to 14) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineStatusBySeverityAsync(Integer severity, final ApiCallback<List<Line>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineStatusBySeverityValidateBeforeCall(severity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Line>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineStopPoints
     * @param id A single line id e.g. victoria (required)
     * @param tflOperatedNationalRailStationsOnly If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineStopPointsCall(String id, Boolean tflOperatedNationalRailStationsOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{id}/StopPoints"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tflOperatedNationalRailStationsOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tflOperatedNationalRailStationsOnly", tflOperatedNationalRailStationsOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineStopPointsValidateBeforeCall(String id, Boolean tflOperatedNationalRailStationsOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lineStopPoints(Async)");
        }
        

        com.squareup.okhttp.Call call = lineStopPointsCall(id, tflOperatedNationalRailStationsOnly, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of the stations that serve the given line id
     * 
     * @param id A single line id e.g. victoria (required)
     * @param tflOperatedNationalRailStationsOnly If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @return List&lt;StopPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StopPoint> lineStopPoints(String id, Boolean tflOperatedNationalRailStationsOnly) throws ApiException {
        ApiResponse<List<StopPoint>> resp = lineStopPointsWithHttpInfo(id, tflOperatedNationalRailStationsOnly);
        return resp.getData();
    }

    /**
     * Gets a list of the stations that serve the given line id
     * 
     * @param id A single line id e.g. victoria (required)
     * @param tflOperatedNationalRailStationsOnly If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @return ApiResponse&lt;List&lt;StopPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StopPoint>> lineStopPointsWithHttpInfo(String id, Boolean tflOperatedNationalRailStationsOnly) throws ApiException {
        com.squareup.okhttp.Call call = lineStopPointsValidateBeforeCall(id, tflOperatedNationalRailStationsOnly, null, null);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of the stations that serve the given line id (asynchronously)
     * 
     * @param id A single line id e.g. victoria (required)
     * @param tflOperatedNationalRailStationsOnly If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineStopPointsAsync(String id, Boolean tflOperatedNationalRailStationsOnly, final ApiCallback<List<StopPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineStopPointsValidateBeforeCall(id, tflOperatedNationalRailStationsOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineTimetable
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineTimetableCall(String fromStopPointId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{id}/Timetable/{fromStopPointId}"
            .replaceAll("\\{" + "fromStopPointId" + "\\}", apiClient.escapeString(fromStopPointId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineTimetableValidateBeforeCall(String fromStopPointId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fromStopPointId' is set
        if (fromStopPointId == null) {
            throw new ApiException("Missing the required parameter 'fromStopPointId' when calling lineTimetable(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lineTimetable(Async)");
        }
        

        com.squareup.okhttp.Call call = lineTimetableCall(fromStopPointId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the timetable for a specified station on the give line
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @return TimetableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TimetableResponse lineTimetable(String fromStopPointId, String id) throws ApiException {
        ApiResponse<TimetableResponse> resp = lineTimetableWithHttpInfo(fromStopPointId, id);
        return resp.getData();
    }

    /**
     * Gets the timetable for a specified station on the give line
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @return ApiResponse&lt;TimetableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TimetableResponse> lineTimetableWithHttpInfo(String fromStopPointId, String id) throws ApiException {
        com.squareup.okhttp.Call call = lineTimetableValidateBeforeCall(fromStopPointId, id, null, null);
        Type localVarReturnType = new TypeToken<TimetableResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the timetable for a specified station on the give line (asynchronously)
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineTimetableAsync(String fromStopPointId, String id, final ApiCallback<TimetableResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineTimetableValidateBeforeCall(fromStopPointId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TimetableResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lineTimetableTo
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param toStopPointId The destination stations&#39;s Naptan code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lineTimetableToCall(String fromStopPointId, String id, String toStopPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}"
            .replaceAll("\\{" + "fromStopPointId" + "\\}", apiClient.escapeString(fromStopPointId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "toStopPointId" + "\\}", apiClient.escapeString(toStopPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lineTimetableToValidateBeforeCall(String fromStopPointId, String id, String toStopPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fromStopPointId' is set
        if (fromStopPointId == null) {
            throw new ApiException("Missing the required parameter 'fromStopPointId' when calling lineTimetableTo(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lineTimetableTo(Async)");
        }
        
        // verify the required parameter 'toStopPointId' is set
        if (toStopPointId == null) {
            throw new ApiException("Missing the required parameter 'toStopPointId' when calling lineTimetableTo(Async)");
        }
        

        com.squareup.okhttp.Call call = lineTimetableToCall(fromStopPointId, id, toStopPointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the timetable for a specified station on the give line with specified destination
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param toStopPointId The destination stations&#39;s Naptan code (required)
     * @return TimetableResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TimetableResponse lineTimetableTo(String fromStopPointId, String id, String toStopPointId) throws ApiException {
        ApiResponse<TimetableResponse> resp = lineTimetableToWithHttpInfo(fromStopPointId, id, toStopPointId);
        return resp.getData();
    }

    /**
     * Gets the timetable for a specified station on the give line with specified destination
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param toStopPointId The destination stations&#39;s Naptan code (required)
     * @return ApiResponse&lt;TimetableResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TimetableResponse> lineTimetableToWithHttpInfo(String fromStopPointId, String id, String toStopPointId) throws ApiException {
        com.squareup.okhttp.Call call = lineTimetableToValidateBeforeCall(fromStopPointId, id, toStopPointId, null, null);
        Type localVarReturnType = new TypeToken<TimetableResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the timetable for a specified station on the give line with specified destination (asynchronously)
     * 
     * @param fromStopPointId The originating station&#39;s stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param id A single line id e.g. victoria (required)
     * @param toStopPointId The destination stations&#39;s Naptan code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lineTimetableToAsync(String fromStopPointId, String id, String toStopPointId, final ApiCallback<TimetableResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lineTimetableToValidateBeforeCall(fromStopPointId, id, toStopPointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TimetableResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
