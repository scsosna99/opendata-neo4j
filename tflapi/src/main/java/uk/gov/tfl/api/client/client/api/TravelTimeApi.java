/*
 * Transport for London Unified API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.tfl.api.client.client.api;

import uk.gov.tfl.api.client.client.ApiCallback;
import uk.gov.tfl.api.client.client.ApiClient;
import uk.gov.tfl.api.client.client.ApiException;
import uk.gov.tfl.api.client.client.ApiResponse;
import uk.gov.tfl.api.client.client.Configuration;
import uk.gov.tfl.api.client.client.Pair;
import uk.gov.tfl.api.client.client.ProgressRequestBody;
import uk.gov.tfl.api.client.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TravelTimeApi {
    private ApiClient apiClient;

    public TravelTimeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TravelTimeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for travelTimeGetCompareOverlay
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param compareType  (required)
     * @param compareValue  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call travelTimeGetCompareOverlayCall(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, String compareType, String compareValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}"
            .replaceAll("\\{" + "z" + "\\}", apiClient.escapeString(z.toString()))
            .replaceAll("\\{" + "pinLat" + "\\}", apiClient.escapeString(pinLat.toString()))
            .replaceAll("\\{" + "pinLon" + "\\}", apiClient.escapeString(pinLon.toString()))
            .replaceAll("\\{" + "mapCenterLat" + "\\}", apiClient.escapeString(mapCenterLat.toString()))
            .replaceAll("\\{" + "mapCenterLon" + "\\}", apiClient.escapeString(mapCenterLon.toString()))
            .replaceAll("\\{" + "width" + "\\}", apiClient.escapeString(width.toString()))
            .replaceAll("\\{" + "height" + "\\}", apiClient.escapeString(height.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scenarioTitle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scenarioTitle", scenarioTitle));
        if (timeOfDayId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeOfDayId", timeOfDayId));
        if (modeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modeId", modeId));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));
        if (travelTimeInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("travelTimeInterval", travelTimeInterval));
        if (compareType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compareType", compareType));
        if (compareValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compareValue", compareValue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call travelTimeGetCompareOverlayValidateBeforeCall(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, String compareType, String compareValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'pinLat' is set
        if (pinLat == null) {
            throw new ApiException("Missing the required parameter 'pinLat' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'pinLon' is set
        if (pinLon == null) {
            throw new ApiException("Missing the required parameter 'pinLon' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'mapCenterLat' is set
        if (mapCenterLat == null) {
            throw new ApiException("Missing the required parameter 'mapCenterLat' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'mapCenterLon' is set
        if (mapCenterLon == null) {
            throw new ApiException("Missing the required parameter 'mapCenterLon' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'scenarioTitle' is set
        if (scenarioTitle == null) {
            throw new ApiException("Missing the required parameter 'scenarioTitle' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'timeOfDayId' is set
        if (timeOfDayId == null) {
            throw new ApiException("Missing the required parameter 'timeOfDayId' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'modeId' is set
        if (modeId == null) {
            throw new ApiException("Missing the required parameter 'modeId' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'travelTimeInterval' is set
        if (travelTimeInterval == null) {
            throw new ApiException("Missing the required parameter 'travelTimeInterval' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'compareType' is set
        if (compareType == null) {
            throw new ApiException("Missing the required parameter 'compareType' when calling travelTimeGetCompareOverlay(Async)");
        }
        
        // verify the required parameter 'compareValue' is set
        if (compareValue == null) {
            throw new ApiException("Missing the required parameter 'compareValue' when calling travelTimeGetCompareOverlay(Async)");
        }
        

        com.squareup.okhttp.Call call = travelTimeGetCompareOverlayCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, compareType, compareValue, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the TravelTime overlay.
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param compareType  (required)
     * @param compareValue  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object travelTimeGetCompareOverlay(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, String compareType, String compareValue) throws ApiException {
        ApiResponse<Object> resp = travelTimeGetCompareOverlayWithHttpInfo(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, compareType, compareValue);
        return resp.getData();
    }

    /**
     * Gets the TravelTime overlay.
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param compareType  (required)
     * @param compareValue  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> travelTimeGetCompareOverlayWithHttpInfo(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, String compareType, String compareValue) throws ApiException {
        com.squareup.okhttp.Call call = travelTimeGetCompareOverlayValidateBeforeCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, compareType, compareValue, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the TravelTime overlay. (asynchronously)
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param compareType  (required)
     * @param compareValue  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call travelTimeGetCompareOverlayAsync(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, String compareType, String compareValue, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = travelTimeGetCompareOverlayValidateBeforeCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, compareType, compareValue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for travelTimeGetOverlay
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call travelTimeGetOverlayCall(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}"
            .replaceAll("\\{" + "z" + "\\}", apiClient.escapeString(z.toString()))
            .replaceAll("\\{" + "pinLat" + "\\}", apiClient.escapeString(pinLat.toString()))
            .replaceAll("\\{" + "pinLon" + "\\}", apiClient.escapeString(pinLon.toString()))
            .replaceAll("\\{" + "mapCenterLat" + "\\}", apiClient.escapeString(mapCenterLat.toString()))
            .replaceAll("\\{" + "mapCenterLon" + "\\}", apiClient.escapeString(mapCenterLon.toString()))
            .replaceAll("\\{" + "width" + "\\}", apiClient.escapeString(width.toString()))
            .replaceAll("\\{" + "height" + "\\}", apiClient.escapeString(height.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (scenarioTitle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("scenarioTitle", scenarioTitle));
        if (timeOfDayId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeOfDayId", timeOfDayId));
        if (modeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modeId", modeId));
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));
        if (travelTimeInterval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("travelTimeInterval", travelTimeInterval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call travelTimeGetOverlayValidateBeforeCall(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling travelTimeGetOverlay(Async)");
        }
        
        // verify the required parameter 'pinLat' is set
        if (pinLat == null) {
            throw new ApiException("Missing the required parameter 'pinLat' when calling travelTimeGetOverlay(Async)");
        }
        
        // verify the required parameter 'pinLon' is set
        if (pinLon == null) {
            throw new ApiException("Missing the required parameter 'pinLon' when calling travelTimeGetOverlay(Async)");
        }
        
        // verify the required parameter 'mapCenterLat' is set
        if (mapCenterLat == null) {
            throw new ApiException("Missing the required parameter 'mapCenterLat' when calling travelTimeGetOverlay(Async)");
        }
        
        // verify the required parameter 'mapCenterLon' is set
        if (mapCenterLon == null) {
            throw new ApiException("Missing the required parameter 'mapCenterLon' when calling travelTimeGetOverlay(Async)");
        }
        
        // verify the required parameter 'scenarioTitle' is set
        if (scenarioTitle == null) {
            throw new ApiException("Missing the required parameter 'scenarioTitle' when calling travelTimeGetOverlay(Async)");
        }
        
        // verify the required parameter 'timeOfDayId' is set
        if (timeOfDayId == null) {
            throw new ApiException("Missing the required parameter 'timeOfDayId' when calling travelTimeGetOverlay(Async)");
        }
        
        // verify the required parameter 'modeId' is set
        if (modeId == null) {
            throw new ApiException("Missing the required parameter 'modeId' when calling travelTimeGetOverlay(Async)");
        }
        
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling travelTimeGetOverlay(Async)");
        }
        
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling travelTimeGetOverlay(Async)");
        }
        
        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling travelTimeGetOverlay(Async)");
        }
        
        // verify the required parameter 'travelTimeInterval' is set
        if (travelTimeInterval == null) {
            throw new ApiException("Missing the required parameter 'travelTimeInterval' when calling travelTimeGetOverlay(Async)");
        }
        

        com.squareup.okhttp.Call call = travelTimeGetOverlayCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the TravelTime overlay.
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object travelTimeGetOverlay(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval) throws ApiException {
        ApiResponse<Object> resp = travelTimeGetOverlayWithHttpInfo(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval);
        return resp.getData();
    }

    /**
     * Gets the TravelTime overlay.
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> travelTimeGetOverlayWithHttpInfo(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval) throws ApiException {
        com.squareup.okhttp.Call call = travelTimeGetOverlayValidateBeforeCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the TravelTime overlay. (asynchronously)
     * 
     * @param z The zoom level. (required)
     * @param pinLat The latitude of the pin. (required)
     * @param pinLon The longitude of the pin. (required)
     * @param mapCenterLat The map center latitude. (required)
     * @param mapCenterLon The map center longitude. (required)
     * @param scenarioTitle The title of the scenario. (required)
     * @param timeOfDayId The id for the time of day (AM/INTER/PM) (required)
     * @param modeId The id of the mode. (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param direction The direction of travel. (required)
     * @param travelTimeInterval The total minutes between the travel time bands (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call travelTimeGetOverlayAsync(Integer z, Double pinLat, Double pinLon, Double mapCenterLat, Double mapCenterLon, String scenarioTitle, String timeOfDayId, String modeId, Integer width, Integer height, String direction, Integer travelTimeInterval, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = travelTimeGetOverlayValidateBeforeCall(z, pinLat, pinLon, mapCenterLat, mapCenterLon, scenarioTitle, timeOfDayId, modeId, width, height, direction, travelTimeInterval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
