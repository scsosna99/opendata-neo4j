/*
 * Transport for London Unified API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.tfl.api.client.client.api;

import uk.gov.tfl.api.client.client.ApiCallback;
import uk.gov.tfl.api.client.client.ApiClient;
import uk.gov.tfl.api.client.client.ApiException;
import uk.gov.tfl.api.client.client.ApiResponse;
import uk.gov.tfl.api.client.client.Configuration;
import uk.gov.tfl.api.client.client.Pair;
import uk.gov.tfl.api.client.client.ProgressRequestBody;
import uk.gov.tfl.api.client.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.tfl.api.client.client.model.DisruptedPoint;
import uk.gov.tfl.api.client.client.model.LineServiceType;
import uk.gov.tfl.api.client.client.model.Mode;
import uk.gov.tfl.api.client.client.model.Place;
import uk.gov.tfl.api.client.client.model.Prediction;
import uk.gov.tfl.api.client.client.model.SearchResponse;
import uk.gov.tfl.api.client.client.model.StopPoint;
import uk.gov.tfl.api.client.client.model.StopPointCategory;
import uk.gov.tfl.api.client.client.model.StopPointRouteSection;
import uk.gov.tfl.api.client.client.model.StopPointsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StopPointApi {
    private ApiClient apiClient;

    public StopPointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StopPointApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for stopPointArrivals
     * @param id A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointArrivalsCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/{id}/Arrivals"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointArrivalsValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopPointArrivals(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointArrivalsCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the list of arrival predictions for the given stop point id
     * 
     * @param id A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @return List&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Prediction> stopPointArrivals(String id) throws ApiException {
        ApiResponse<List<Prediction>> resp = stopPointArrivalsWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets the list of arrival predictions for the given stop point id
     * 
     * @param id A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @return ApiResponse&lt;List&lt;Prediction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Prediction>> stopPointArrivalsWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = stopPointArrivalsValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<Prediction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the list of arrival predictions for the given stop point id (asynchronously)
     * 
     * @param id A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointArrivalsAsync(String id, final ApiCallback<List<Prediction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointArrivalsValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Prediction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointCrowding
     * @param id The Naptan id of the stop (required)
     * @param line A particular line e.g. victoria, circle, northern etc. (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointCrowdingCall(String id, String line, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/{id}/Crowding/{line}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "line" + "\\}", apiClient.escapeString(line.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (direction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("direction", direction));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointCrowdingValidateBeforeCall(String id, String line, String direction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopPointCrowding(Async)");
        }
        
        // verify the required parameter 'line' is set
        if (line == null) {
            throw new ApiException("Missing the required parameter 'line' when calling stopPointCrowding(Async)");
        }
        
        // verify the required parameter 'direction' is set
        if (direction == null) {
            throw new ApiException("Missing the required parameter 'direction' when calling stopPointCrowding(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointCrowdingCall(id, line, direction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
     * 
     * @param id The Naptan id of the stop (required)
     * @param line A particular line e.g. victoria, circle, northern etc. (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @return List&lt;StopPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StopPoint> stopPointCrowding(String id, String line, String direction) throws ApiException {
        ApiResponse<List<StopPoint>> resp = stopPointCrowdingWithHttpInfo(id, line, direction);
        return resp.getData();
    }

    /**
     * Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
     * 
     * @param id The Naptan id of the stop (required)
     * @param line A particular line e.g. victoria, circle, northern etc. (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @return ApiResponse&lt;List&lt;StopPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StopPoint>> stopPointCrowdingWithHttpInfo(String id, String line, String direction) throws ApiException {
        com.squareup.okhttp.Call call = stopPointCrowdingValidateBeforeCall(id, line, direction, null, null);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction. (asynchronously)
     * 
     * @param id The Naptan id of the stop (required)
     * @param line A particular line e.g. victoria, circle, northern etc. (required)
     * @param direction The direction of travel. Can be inbound or outbound. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointCrowdingAsync(String id, String line, String direction, final ApiCallback<List<StopPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointCrowdingValidateBeforeCall(id, line, direction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointDirection
     * @param id Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param toStopPointId Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param lineId Optional line id filter e.g. victoria (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointDirectionCall(String id, String toStopPointId, String lineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/{id}/DirectionTo/{toStopPointId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "toStopPointId" + "\\}", apiClient.escapeString(toStopPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lineId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lineId", lineId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointDirectionValidateBeforeCall(String id, String toStopPointId, String lineId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopPointDirection(Async)");
        }
        
        // verify the required parameter 'toStopPointId' is set
        if (toStopPointId == null) {
            throw new ApiException("Missing the required parameter 'toStopPointId' when calling stopPointDirection(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointDirectionCall(id, toStopPointId, lineId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to.
     * 
     * @param id Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param toStopPointId Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param lineId Optional line id filter e.g. victoria (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String stopPointDirection(String id, String toStopPointId, String lineId) throws ApiException {
        ApiResponse<String> resp = stopPointDirectionWithHttpInfo(id, toStopPointId, lineId);
        return resp.getData();
    }

    /**
     * Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to.
     * 
     * @param id Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param toStopPointId Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param lineId Optional line id filter e.g. victoria (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> stopPointDirectionWithHttpInfo(String id, String toStopPointId, String lineId) throws ApiException {
        com.squareup.okhttp.Call call = stopPointDirectionValidateBeforeCall(id, toStopPointId, lineId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to. (asynchronously)
     * 
     * @param id Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param toStopPointId Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param lineId Optional line id filter e.g. victoria (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointDirectionAsync(String id, String toStopPointId, String lineId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointDirectionValidateBeforeCall(id, toStopPointId, lineId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointDisruption
     * @param ids A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param getFamily Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)
     * @param includeRouteBlockedStops  (optional)
     * @param flattenResponse Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointDisruptionCall(List<String> ids, Boolean getFamily, Boolean includeRouteBlockedStops, Boolean flattenResponse, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/{ids}/Disruption"
            .replaceAll("\\{" + "ids" + "\\}", apiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (getFamily != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("getFamily", getFamily));
        if (includeRouteBlockedStops != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeRouteBlockedStops", includeRouteBlockedStops));
        if (flattenResponse != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("flattenResponse", flattenResponse));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointDisruptionValidateBeforeCall(List<String> ids, Boolean getFamily, Boolean includeRouteBlockedStops, Boolean flattenResponse, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling stopPointDisruption(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointDisruptionCall(ids, getFamily, includeRouteBlockedStops, flattenResponse, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
     * 
     * @param ids A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param getFamily Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)
     * @param includeRouteBlockedStops  (optional)
     * @param flattenResponse Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)
     * @return List&lt;DisruptedPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DisruptedPoint> stopPointDisruption(List<String> ids, Boolean getFamily, Boolean includeRouteBlockedStops, Boolean flattenResponse) throws ApiException {
        ApiResponse<List<DisruptedPoint>> resp = stopPointDisruptionWithHttpInfo(ids, getFamily, includeRouteBlockedStops, flattenResponse);
        return resp.getData();
    }

    /**
     * Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
     * 
     * @param ids A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param getFamily Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)
     * @param includeRouteBlockedStops  (optional)
     * @param flattenResponse Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)
     * @return ApiResponse&lt;List&lt;DisruptedPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DisruptedPoint>> stopPointDisruptionWithHttpInfo(List<String> ids, Boolean getFamily, Boolean includeRouteBlockedStops, Boolean flattenResponse) throws ApiException {
        com.squareup.okhttp.Call call = stopPointDisruptionValidateBeforeCall(ids, getFamily, includeRouteBlockedStops, flattenResponse, null, null);
        Type localVarReturnType = new TypeToken<List<DisruptedPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have. (asynchronously)
     * 
     * @param ids A comma-seperated list of stop point ids. Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param getFamily Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false. (optional)
     * @param includeRouteBlockedStops  (optional)
     * @param flattenResponse Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointDisruptionAsync(List<String> ids, Boolean getFamily, Boolean includeRouteBlockedStops, Boolean flattenResponse, final ApiCallback<List<DisruptedPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointDisruptionValidateBeforeCall(ids, getFamily, includeRouteBlockedStops, flattenResponse, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DisruptedPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointDisruptionByMode
     * @param modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param includeRouteBlockedStops  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointDisruptionByModeCall(List<String> modes, Boolean includeRouteBlockedStops, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/Mode/{modes}/Disruption"
            .replaceAll("\\{" + "modes" + "\\}", apiClient.escapeString(modes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeRouteBlockedStops != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeRouteBlockedStops", includeRouteBlockedStops));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointDisruptionByModeValidateBeforeCall(List<String> modes, Boolean includeRouteBlockedStops, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modes' is set
        if (modes == null) {
            throw new ApiException("Missing the required parameter 'modes' when calling stopPointDisruptionByMode(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointDisruptionByModeCall(modes, includeRouteBlockedStops, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a distinct list of disrupted stop points for the given modes
     * 
     * @param modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param includeRouteBlockedStops  (optional)
     * @return List&lt;DisruptedPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DisruptedPoint> stopPointDisruptionByMode(List<String> modes, Boolean includeRouteBlockedStops) throws ApiException {
        ApiResponse<List<DisruptedPoint>> resp = stopPointDisruptionByModeWithHttpInfo(modes, includeRouteBlockedStops);
        return resp.getData();
    }

    /**
     * Gets a distinct list of disrupted stop points for the given modes
     * 
     * @param modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param includeRouteBlockedStops  (optional)
     * @return ApiResponse&lt;List&lt;DisruptedPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DisruptedPoint>> stopPointDisruptionByModeWithHttpInfo(List<String> modes, Boolean includeRouteBlockedStops) throws ApiException {
        com.squareup.okhttp.Call call = stopPointDisruptionByModeValidateBeforeCall(modes, includeRouteBlockedStops, null, null);
        Type localVarReturnType = new TypeToken<List<DisruptedPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a distinct list of disrupted stop points for the given modes (asynchronously)
     * 
     * @param modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param includeRouteBlockedStops  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointDisruptionByModeAsync(List<String> modes, Boolean includeRouteBlockedStops, final ApiCallback<List<DisruptedPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointDisruptionByModeValidateBeforeCall(modes, includeRouteBlockedStops, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DisruptedPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointGet
     * @param ids A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param includeCrowdingData Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointGetCall(List<String> ids, Boolean includeCrowdingData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/{ids}"
            .replaceAll("\\{" + "ids" + "\\}", apiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeCrowdingData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeCrowdingData", includeCrowdingData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointGetValidateBeforeCall(List<String> ids, Boolean includeCrowdingData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling stopPointGet(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointGetCall(ids, includeCrowdingData, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of StopPoints corresponding to the given list of stop ids.
     * 
     * @param ids A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param includeCrowdingData Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)
     * @return List&lt;StopPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StopPoint> stopPointGet(List<String> ids, Boolean includeCrowdingData) throws ApiException {
        ApiResponse<List<StopPoint>> resp = stopPointGetWithHttpInfo(ids, includeCrowdingData);
        return resp.getData();
    }

    /**
     * Gets a list of StopPoints corresponding to the given list of stop ids.
     * 
     * @param ids A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param includeCrowdingData Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)
     * @return ApiResponse&lt;List&lt;StopPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StopPoint>> stopPointGetWithHttpInfo(List<String> ids, Boolean includeCrowdingData) throws ApiException {
        com.squareup.okhttp.Call call = stopPointGetValidateBeforeCall(ids, includeCrowdingData, null, null);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of StopPoints corresponding to the given list of stop ids. (asynchronously)
     * 
     * @param ids A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.              You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name. (required)
     * @param includeCrowdingData Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line} (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointGetAsync(List<String> ids, Boolean includeCrowdingData, final ApiCallback<List<StopPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointGetValidateBeforeCall(ids, includeCrowdingData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointGetByGeoPoint
     * @param stopTypes a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint) (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param radius the radius of the bounding circle in metres (default : 200) (optional)
     * @param useStopPointHierarchy Re-arrange the output into a parent/child hierarchy (optional)
     * @param modes the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)
     * @param categories an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)
     * @param returnLines true to return the lines that each stop point serves as a nested resource (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointGetByGeoPointCall(List<String> stopTypes, Double locationLat, Double locationLon, Integer radius, Boolean useStopPointHierarchy, List<String> modes, List<String> categories, Boolean returnLines, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stopTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "stopTypes", stopTypes));
        if (radius != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("radius", radius));
        if (useStopPointHierarchy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useStopPointHierarchy", useStopPointHierarchy));
        if (modes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "modes", modes));
        if (categories != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "categories", categories));
        if (returnLines != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("returnLines", returnLines));
        if (locationLat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location.lat", locationLat));
        if (locationLon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location.lon", locationLon));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointGetByGeoPointValidateBeforeCall(List<String> stopTypes, Double locationLat, Double locationLon, Integer radius, Boolean useStopPointHierarchy, List<String> modes, List<String> categories, Boolean returnLines, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stopTypes' is set
        if (stopTypes == null) {
            throw new ApiException("Missing the required parameter 'stopTypes' when calling stopPointGetByGeoPoint(Async)");
        }
        
        // verify the required parameter 'locationLat' is set
        if (locationLat == null) {
            throw new ApiException("Missing the required parameter 'locationLat' when calling stopPointGetByGeoPoint(Async)");
        }
        
        // verify the required parameter 'locationLon' is set
        if (locationLon == null) {
            throw new ApiException("Missing the required parameter 'locationLon' when calling stopPointGetByGeoPoint(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointGetByGeoPointCall(stopTypes, locationLat, locationLon, radius, useStopPointHierarchy, modes, categories, returnLines, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of StopPoints within {radius} by the specified criteria
     * 
     * @param stopTypes a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint) (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param radius the radius of the bounding circle in metres (default : 200) (optional)
     * @param useStopPointHierarchy Re-arrange the output into a parent/child hierarchy (optional)
     * @param modes the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)
     * @param categories an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)
     * @param returnLines true to return the lines that each stop point serves as a nested resource (optional)
     * @return StopPointsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StopPointsResponse stopPointGetByGeoPoint(List<String> stopTypes, Double locationLat, Double locationLon, Integer radius, Boolean useStopPointHierarchy, List<String> modes, List<String> categories, Boolean returnLines) throws ApiException {
        ApiResponse<StopPointsResponse> resp = stopPointGetByGeoPointWithHttpInfo(stopTypes, locationLat, locationLon, radius, useStopPointHierarchy, modes, categories, returnLines);
        return resp.getData();
    }

    /**
     * Gets a list of StopPoints within {radius} by the specified criteria
     * 
     * @param stopTypes a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint) (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param radius the radius of the bounding circle in metres (default : 200) (optional)
     * @param useStopPointHierarchy Re-arrange the output into a parent/child hierarchy (optional)
     * @param modes the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)
     * @param categories an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)
     * @param returnLines true to return the lines that each stop point serves as a nested resource (optional)
     * @return ApiResponse&lt;StopPointsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StopPointsResponse> stopPointGetByGeoPointWithHttpInfo(List<String> stopTypes, Double locationLat, Double locationLon, Integer radius, Boolean useStopPointHierarchy, List<String> modes, List<String> categories, Boolean returnLines) throws ApiException {
        com.squareup.okhttp.Call call = stopPointGetByGeoPointValidateBeforeCall(stopTypes, locationLat, locationLon, radius, useStopPointHierarchy, modes, categories, returnLines, null, null);
        Type localVarReturnType = new TypeToken<StopPointsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of StopPoints within {radius} by the specified criteria (asynchronously)
     * 
     * @param stopTypes a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint) (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param radius the radius of the bounding circle in metres (default : 200) (optional)
     * @param useStopPointHierarchy Re-arrange the output into a parent/child hierarchy (optional)
     * @param modes the list of modes to search (comma separated mode names e.g. tube,dlr) (optional)
     * @param categories an optional list of comma separated property categories to return in the StopPoint&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint) (optional)
     * @param returnLines true to return the lines that each stop point serves as a nested resource (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointGetByGeoPointAsync(List<String> stopTypes, Double locationLat, Double locationLon, Integer radius, Boolean useStopPointHierarchy, List<String> modes, List<String> categories, Boolean returnLines, final ApiCallback<StopPointsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointGetByGeoPointValidateBeforeCall(stopTypes, locationLat, locationLon, radius, useStopPointHierarchy, modes, categories, returnLines, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StopPointsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointGetByMode
     * @param modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param page The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointGetByModeCall(List<String> modes, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/Mode/{modes}"
            .replaceAll("\\{" + "modes" + "\\}", apiClient.escapeString(modes.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointGetByModeValidateBeforeCall(List<String> modes, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modes' is set
        if (modes == null) {
            throw new ApiException("Missing the required parameter 'modes' when calling stopPointGetByMode(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointGetByModeCall(modes, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of StopPoints filtered by the modes available at that StopPoint.
     * 
     * @param modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param page The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)
     * @return StopPointsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StopPointsResponse stopPointGetByMode(List<String> modes, Integer page) throws ApiException {
        ApiResponse<StopPointsResponse> resp = stopPointGetByModeWithHttpInfo(modes, page);
        return resp.getData();
    }

    /**
     * Gets a list of StopPoints filtered by the modes available at that StopPoint.
     * 
     * @param modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param page The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)
     * @return ApiResponse&lt;StopPointsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StopPointsResponse> stopPointGetByModeWithHttpInfo(List<String> modes, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = stopPointGetByModeValidateBeforeCall(modes, page, null, null);
        Type localVarReturnType = new TypeToken<StopPointsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of StopPoints filtered by the modes available at that StopPoint. (asynchronously)
     * 
     * @param modes A comma-seperated list of modes e.g. tube,dlr (required)
     * @param page The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointGetByModeAsync(List<String> modes, Integer page, final ApiCallback<StopPointsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointGetByModeValidateBeforeCall(modes, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StopPointsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointGetBySms
     * @param id A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334. (required)
     * @param output If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointGetBySmsCall(String id, String output, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/Sms/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (output != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("output", output));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointGetBySmsValidateBeforeCall(String id, String output, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopPointGetBySms(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointGetBySmsCall(id, output, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a StopPoint for a given sms code.
     * 
     * @param id A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334. (required)
     * @param output If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object stopPointGetBySms(String id, String output) throws ApiException {
        ApiResponse<Object> resp = stopPointGetBySmsWithHttpInfo(id, output);
        return resp.getData();
    }

    /**
     * Gets a StopPoint for a given sms code.
     * 
     * @param id A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334. (required)
     * @param output If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> stopPointGetBySmsWithHttpInfo(String id, String output) throws ApiException {
        com.squareup.okhttp.Call call = stopPointGetBySmsValidateBeforeCall(id, output, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a StopPoint for a given sms code. (asynchronously)
     * 
     * @param id A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334. (required)
     * @param output If set to \&quot;web\&quot;, a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointGetBySmsAsync(String id, String output, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointGetBySmsValidateBeforeCall(id, output, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointGetByType
     * @param types A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointGetByTypeCall(List<String> types, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/Type/{types}"
            .replaceAll("\\{" + "types" + "\\}", apiClient.escapeString(types.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointGetByTypeValidateBeforeCall(List<String> types, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'types' is set
        if (types == null) {
            throw new ApiException("Missing the required parameter 'types' when calling stopPointGetByType(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointGetByTypeCall(types, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all stop points of a given type
     * 
     * @param types A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint. (required)
     * @return List&lt;StopPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StopPoint> stopPointGetByType(List<String> types) throws ApiException {
        ApiResponse<List<StopPoint>> resp = stopPointGetByTypeWithHttpInfo(types);
        return resp.getData();
    }

    /**
     * Gets all stop points of a given type
     * 
     * @param types A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint. (required)
     * @return ApiResponse&lt;List&lt;StopPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StopPoint>> stopPointGetByTypeWithHttpInfo(List<String> types) throws ApiException {
        com.squareup.okhttp.Call call = stopPointGetByTypeValidateBeforeCall(types, null, null);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all stop points of a given type (asynchronously)
     * 
     * @param types A comma-separated list of the types to return. Max. approx. 12 types.               A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointGetByTypeAsync(List<String> types, final ApiCallback<List<StopPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointGetByTypeValidateBeforeCall(types, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointGetCarParksById
     * @param stopPointId stopPointId is required to get the car parks. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointGetCarParksByIdCall(String stopPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/{stopPointId}/CarParks"
            .replaceAll("\\{" + "stopPointId" + "\\}", apiClient.escapeString(stopPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointGetCarParksByIdValidateBeforeCall(String stopPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stopPointId' is set
        if (stopPointId == null) {
            throw new ApiException("Missing the required parameter 'stopPointId' when calling stopPointGetCarParksById(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointGetCarParksByIdCall(stopPointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get car parks corresponding to the given stop point id.
     * 
     * @param stopPointId stopPointId is required to get the car parks. (required)
     * @return List&lt;Place&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Place> stopPointGetCarParksById(String stopPointId) throws ApiException {
        ApiResponse<List<Place>> resp = stopPointGetCarParksByIdWithHttpInfo(stopPointId);
        return resp.getData();
    }

    /**
     * Get car parks corresponding to the given stop point id.
     * 
     * @param stopPointId stopPointId is required to get the car parks. (required)
     * @return ApiResponse&lt;List&lt;Place&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Place>> stopPointGetCarParksByIdWithHttpInfo(String stopPointId) throws ApiException {
        com.squareup.okhttp.Call call = stopPointGetCarParksByIdValidateBeforeCall(stopPointId, null, null);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get car parks corresponding to the given stop point id. (asynchronously)
     * 
     * @param stopPointId stopPointId is required to get the car parks. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointGetCarParksByIdAsync(String stopPointId, final ApiCallback<List<Place>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointGetCarParksByIdValidateBeforeCall(stopPointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointGetServiceTypes
     * @param id The Naptan id of the stop (required)
     * @param lineIds The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)
     * @param modes The modes which the lines are relevant to (all if empty) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointGetServiceTypesCall(String id, List<String> lineIds, List<String> modes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/ServiceTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (lineIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "lineIds", lineIds));
        if (modes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "modes", modes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointGetServiceTypesValidateBeforeCall(String id, List<String> lineIds, List<String> modes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopPointGetServiceTypes(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointGetServiceTypesCall(id, lineIds, modes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the service types for a given stoppoint
     * 
     * @param id The Naptan id of the stop (required)
     * @param lineIds The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)
     * @param modes The modes which the lines are relevant to (all if empty) (optional)
     * @return List&lt;LineServiceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LineServiceType> stopPointGetServiceTypes(String id, List<String> lineIds, List<String> modes) throws ApiException {
        ApiResponse<List<LineServiceType>> resp = stopPointGetServiceTypesWithHttpInfo(id, lineIds, modes);
        return resp.getData();
    }

    /**
     * Gets the service types for a given stoppoint
     * 
     * @param id The Naptan id of the stop (required)
     * @param lineIds The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)
     * @param modes The modes which the lines are relevant to (all if empty) (optional)
     * @return ApiResponse&lt;List&lt;LineServiceType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LineServiceType>> stopPointGetServiceTypesWithHttpInfo(String id, List<String> lineIds, List<String> modes) throws ApiException {
        com.squareup.okhttp.Call call = stopPointGetServiceTypesValidateBeforeCall(id, lineIds, modes, null, null);
        Type localVarReturnType = new TypeToken<List<LineServiceType>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the service types for a given stoppoint (asynchronously)
     * 
     * @param id The Naptan id of the stop (required)
     * @param lineIds The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty) (optional)
     * @param modes The modes which the lines are relevant to (all if empty) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointGetServiceTypesAsync(String id, List<String> lineIds, List<String> modes, final ApiCallback<List<LineServiceType>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointGetServiceTypesValidateBeforeCall(id, lineIds, modes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LineServiceType>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointGetTaxiRanksByIds
     * @param stopPointId stopPointId is required to get the taxi ranks. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointGetTaxiRanksByIdsCall(String stopPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/{stopPointId}/TaxiRanks"
            .replaceAll("\\{" + "stopPointId" + "\\}", apiClient.escapeString(stopPointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointGetTaxiRanksByIdsValidateBeforeCall(String stopPointId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stopPointId' is set
        if (stopPointId == null) {
            throw new ApiException("Missing the required parameter 'stopPointId' when calling stopPointGetTaxiRanksByIds(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointGetTaxiRanksByIdsCall(stopPointId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of taxi ranks corresponding to the given stop point id.
     * 
     * @param stopPointId stopPointId is required to get the taxi ranks. (required)
     * @return List&lt;Place&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Place> stopPointGetTaxiRanksByIds(String stopPointId) throws ApiException {
        ApiResponse<List<Place>> resp = stopPointGetTaxiRanksByIdsWithHttpInfo(stopPointId);
        return resp.getData();
    }

    /**
     * Gets a list of taxi ranks corresponding to the given stop point id.
     * 
     * @param stopPointId stopPointId is required to get the taxi ranks. (required)
     * @return ApiResponse&lt;List&lt;Place&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Place>> stopPointGetTaxiRanksByIdsWithHttpInfo(String stopPointId) throws ApiException {
        com.squareup.okhttp.Call call = stopPointGetTaxiRanksByIdsValidateBeforeCall(stopPointId, null, null);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of taxi ranks corresponding to the given stop point id. (asynchronously)
     * 
     * @param stopPointId stopPointId is required to get the taxi ranks. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointGetTaxiRanksByIdsAsync(String stopPointId, final ApiCallback<List<Place>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointGetTaxiRanksByIdsValidateBeforeCall(stopPointId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointGet_0
     * @param id A naptan id for a stop point (station naptan code e.g. 940GZZLUASL). (required)
     * @param placeTypes A comcomma-separated value representing the place types. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointGet_0Call(String id, List<String> placeTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/{id}/placeTypes"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (placeTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "placeTypes", placeTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointGet_0ValidateBeforeCall(String id, List<String> placeTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopPointGet_0(Async)");
        }
        
        // verify the required parameter 'placeTypes' is set
        if (placeTypes == null) {
            throw new ApiException("Missing the required parameter 'placeTypes' when calling stopPointGet_0(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointGet_0Call(id, placeTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a list of places corresponding to a given id and place types.
     * 
     * @param id A naptan id for a stop point (station naptan code e.g. 940GZZLUASL). (required)
     * @param placeTypes A comcomma-separated value representing the place types. (required)
     * @return List&lt;Place&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Place> stopPointGet_0(String id, List<String> placeTypes) throws ApiException {
        ApiResponse<List<Place>> resp = stopPointGet_0WithHttpInfo(id, placeTypes);
        return resp.getData();
    }

    /**
     * Get a list of places corresponding to a given id and place types.
     * 
     * @param id A naptan id for a stop point (station naptan code e.g. 940GZZLUASL). (required)
     * @param placeTypes A comcomma-separated value representing the place types. (required)
     * @return ApiResponse&lt;List&lt;Place&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Place>> stopPointGet_0WithHttpInfo(String id, List<String> placeTypes) throws ApiException {
        com.squareup.okhttp.Call call = stopPointGet_0ValidateBeforeCall(id, placeTypes, null, null);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of places corresponding to a given id and place types. (asynchronously)
     * 
     * @param id A naptan id for a stop point (station naptan code e.g. 940GZZLUASL). (required)
     * @param placeTypes A comcomma-separated value representing the place types. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointGet_0Async(String id, List<String> placeTypes, final ApiCallback<List<Place>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointGet_0ValidateBeforeCall(id, placeTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointMetaCategories
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointMetaCategoriesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/Meta/Categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointMetaCategoriesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = stopPointMetaCategoriesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the list of available StopPoint additional information categories
     * 
     * @return List&lt;StopPointCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StopPointCategory> stopPointMetaCategories() throws ApiException {
        ApiResponse<List<StopPointCategory>> resp = stopPointMetaCategoriesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets the list of available StopPoint additional information categories
     * 
     * @return ApiResponse&lt;List&lt;StopPointCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StopPointCategory>> stopPointMetaCategoriesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = stopPointMetaCategoriesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<StopPointCategory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the list of available StopPoint additional information categories (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointMetaCategoriesAsync(final ApiCallback<List<StopPointCategory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointMetaCategoriesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StopPointCategory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointMetaModes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointMetaModesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/Meta/Modes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointMetaModesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = stopPointMetaModesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the list of available StopPoint modes
     * 
     * @return List&lt;Mode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Mode> stopPointMetaModes() throws ApiException {
        ApiResponse<List<Mode>> resp = stopPointMetaModesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets the list of available StopPoint modes
     * 
     * @return ApiResponse&lt;List&lt;Mode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Mode>> stopPointMetaModesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = stopPointMetaModesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Mode>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the list of available StopPoint modes (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointMetaModesAsync(final ApiCallback<List<Mode>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointMetaModesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Mode>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointMetaStopTypes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointMetaStopTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/Meta/StopTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointMetaStopTypesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = stopPointMetaStopTypesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the list of available StopPoint types
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> stopPointMetaStopTypes() throws ApiException {
        ApiResponse<List<String>> resp = stopPointMetaStopTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets the list of available StopPoint types
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> stopPointMetaStopTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = stopPointMetaStopTypesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the list of available StopPoint types (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointMetaStopTypesAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointMetaStopTypesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointReachableFrom
     * @param id The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by (required)
     * @param lineId Line id of the line to filter by (e.g. victoria) (required)
     * @param serviceTypes A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointReachableFromCall(String id, String lineId, List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/{id}/CanReachOnLine/{lineId}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "lineId" + "\\}", apiClient.escapeString(lineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointReachableFromValidateBeforeCall(String id, String lineId, List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopPointReachableFrom(Async)");
        }
        
        // verify the required parameter 'lineId' is set
        if (lineId == null) {
            throw new ApiException("Missing the required parameter 'lineId' when calling stopPointReachableFrom(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointReachableFromCall(id, lineId, serviceTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets Stopoints that are reachable from a station/line combination.
     * 
     * @param id The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by (required)
     * @param lineId Line id of the line to filter by (e.g. victoria) (required)
     * @param serviceTypes A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return List&lt;StopPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StopPoint> stopPointReachableFrom(String id, String lineId, List<String> serviceTypes) throws ApiException {
        ApiResponse<List<StopPoint>> resp = stopPointReachableFromWithHttpInfo(id, lineId, serviceTypes);
        return resp.getData();
    }

    /**
     * Gets Stopoints that are reachable from a station/line combination.
     * 
     * @param id The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by (required)
     * @param lineId Line id of the line to filter by (e.g. victoria) (required)
     * @param serviceTypes A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return ApiResponse&lt;List&lt;StopPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StopPoint>> stopPointReachableFromWithHttpInfo(String id, String lineId, List<String> serviceTypes) throws ApiException {
        com.squareup.okhttp.Call call = stopPointReachableFromValidateBeforeCall(id, lineId, serviceTypes, null, null);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Stopoints that are reachable from a station/line combination. (asynchronously)
     * 
     * @param id The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by (required)
     * @param lineId Line id of the line to filter by (e.g. victoria) (required)
     * @param serviceTypes A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointReachableFromAsync(String id, String lineId, List<String> serviceTypes, final ApiCallback<List<StopPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointReachableFromValidateBeforeCall(id, lineId, serviceTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointRoute
     * @param id A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param serviceTypes A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointRouteCall(String id, List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/{id}/Route"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceTypes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "serviceTypes", serviceTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointRouteValidateBeforeCall(String id, List<String> serviceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopPointRoute(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointRouteCall(id, serviceTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns the route sections for all the lines that service the given stop point ids
     * 
     * @param id A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param serviceTypes A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return List&lt;StopPointRouteSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StopPointRouteSection> stopPointRoute(String id, List<String> serviceTypes) throws ApiException {
        ApiResponse<List<StopPointRouteSection>> resp = stopPointRouteWithHttpInfo(id, serviceTypes);
        return resp.getData();
    }

    /**
     * Returns the route sections for all the lines that service the given stop point ids
     * 
     * @param id A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param serviceTypes A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @return ApiResponse&lt;List&lt;StopPointRouteSection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StopPointRouteSection>> stopPointRouteWithHttpInfo(String id, List<String> serviceTypes) throws ApiException {
        com.squareup.okhttp.Call call = stopPointRouteValidateBeforeCall(id, serviceTypes, null, null);
        Type localVarReturnType = new TypeToken<List<StopPointRouteSection>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the route sections for all the lines that service the given stop point ids (asynchronously)
     * 
     * @param id A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) (required)
     * @param serviceTypes A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to &#39;Regular&#39; if not specified (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointRouteAsync(String id, List<String> serviceTypes, final ApiCallback<List<StopPointRouteSection>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointRouteValidateBeforeCall(id, serviceTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StopPointRouteSection>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointSearch
     * @param query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param modes An optional, parameter separated list of the modes to filter by (optional)
     * @param faresOnly True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param maxResults An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param lines An optional, parameter separated list of the lines to filter by (optional)
     * @param includeHubs If true, returns results including HUBs. (optional)
     * @param tflOperatedNationalRailStationsOnly If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointSearchCall(String query, List<String> modes, Boolean faresOnly, Integer maxResults, List<String> lines, Boolean includeHubs, Boolean tflOperatedNationalRailStationsOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (modes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "modes", modes));
        if (faresOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("faresOnly", faresOnly));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (lines != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "lines", lines));
        if (includeHubs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeHubs", includeHubs));
        if (tflOperatedNationalRailStationsOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tflOperatedNationalRailStationsOnly", tflOperatedNationalRailStationsOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointSearchValidateBeforeCall(String query, List<String> modes, Boolean faresOnly, Integer maxResults, List<String> lines, Boolean includeHubs, Boolean tflOperatedNationalRailStationsOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling stopPointSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointSearchCall(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     * 
     * @param query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param modes An optional, parameter separated list of the modes to filter by (optional)
     * @param faresOnly True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param maxResults An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param lines An optional, parameter separated list of the lines to filter by (optional)
     * @param includeHubs If true, returns results including HUBs. (optional)
     * @param tflOperatedNationalRailStationsOnly If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResponse stopPointSearch(String query, List<String> modes, Boolean faresOnly, Integer maxResults, List<String> lines, Boolean includeHubs, Boolean tflOperatedNationalRailStationsOnly) throws ApiException {
        ApiResponse<SearchResponse> resp = stopPointSearchWithHttpInfo(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly);
        return resp.getData();
    }

    /**
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     * 
     * @param query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param modes An optional, parameter separated list of the modes to filter by (optional)
     * @param faresOnly True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param maxResults An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param lines An optional, parameter separated list of the lines to filter by (optional)
     * @param includeHubs If true, returns results including HUBs. (optional)
     * @param tflOperatedNationalRailStationsOnly If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResponse> stopPointSearchWithHttpInfo(String query, List<String> modes, Boolean faresOnly, Integer maxResults, List<String> lines, Boolean includeHubs, Boolean tflOperatedNationalRailStationsOnly) throws ApiException {
        com.squareup.okhttp.Call call = stopPointSearchValidateBeforeCall(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly, null, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. (asynchronously)
     * 
     * @param query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param modes An optional, parameter separated list of the modes to filter by (optional)
     * @param faresOnly True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param maxResults An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param lines An optional, parameter separated list of the lines to filter by (optional)
     * @param includeHubs If true, returns results including HUBs. (optional)
     * @param tflOperatedNationalRailStationsOnly If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointSearchAsync(String query, List<String> modes, Boolean faresOnly, Integer maxResults, List<String> lines, Boolean includeHubs, Boolean tflOperatedNationalRailStationsOnly, final ApiCallback<SearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointSearchValidateBeforeCall(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopPointSearch_0
     * @param query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param modes An optional, parameter separated list of the modes to filter by (optional)
     * @param faresOnly True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param maxResults An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param lines An optional, parameter separated list of the lines to filter by (optional)
     * @param includeHubs If true, returns results including HUBs. (optional)
     * @param tflOperatedNationalRailStationsOnly If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopPointSearch_0Call(String query, List<String> modes, Boolean faresOnly, Integer maxResults, List<String> lines, Boolean includeHubs, Boolean tflOperatedNationalRailStationsOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopPoint/Search/{query}"
            .replaceAll("\\{" + "query" + "\\}", apiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modes != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "modes", modes));
        if (faresOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("faresOnly", faresOnly));
        if (maxResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxResults", maxResults));
        if (lines != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "lines", lines));
        if (includeHubs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeHubs", includeHubs));
        if (tflOperatedNationalRailStationsOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tflOperatedNationalRailStationsOnly", tflOperatedNationalRailStationsOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopPointSearch_0ValidateBeforeCall(String query, List<String> modes, Boolean faresOnly, Integer maxResults, List<String> lines, Boolean includeHubs, Boolean tflOperatedNationalRailStationsOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling stopPointSearch_0(Async)");
        }
        

        com.squareup.okhttp.Call call = stopPointSearch_0Call(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     * 
     * @param query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param modes An optional, parameter separated list of the modes to filter by (optional)
     * @param faresOnly True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param maxResults An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param lines An optional, parameter separated list of the lines to filter by (optional)
     * @param includeHubs If true, returns results including HUBs. (optional)
     * @param tflOperatedNationalRailStationsOnly If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchResponse stopPointSearch_0(String query, List<String> modes, Boolean faresOnly, Integer maxResults, List<String> lines, Boolean includeHubs, Boolean tflOperatedNationalRailStationsOnly) throws ApiException {
        ApiResponse<SearchResponse> resp = stopPointSearch_0WithHttpInfo(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly);
        return resp.getData();
    }

    /**
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     * 
     * @param query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param modes An optional, parameter separated list of the modes to filter by (optional)
     * @param faresOnly True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param maxResults An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param lines An optional, parameter separated list of the lines to filter by (optional)
     * @param includeHubs If true, returns results including HUBs. (optional)
     * @param tflOperatedNationalRailStationsOnly If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchResponse> stopPointSearch_0WithHttpInfo(String query, List<String> modes, Boolean faresOnly, Integer maxResults, List<String> lines, Boolean includeHubs, Boolean tflOperatedNationalRailStationsOnly) throws ApiException {
        com.squareup.okhttp.Call call = stopPointSearch_0ValidateBeforeCall(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly, null, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code. (asynchronously)
     * 
     * @param query The query string, case-insensitive. Leading and trailing wildcards are applied automatically. (required)
     * @param modes An optional, parameter separated list of the modes to filter by (optional)
     * @param faresOnly True to only return stations in that have Fares data available for single fares to another station. (optional)
     * @param maxResults An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,              it is possible that the flattened result set will contain more than 50 items. (optional)
     * @param lines An optional, parameter separated list of the lines to filter by (optional)
     * @param includeHubs If true, returns results including HUBs. (optional)
     * @param tflOperatedNationalRailStationsOnly If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopPointSearch_0Async(String query, List<String> modes, Boolean faresOnly, Integer maxResults, List<String> lines, Boolean includeHubs, Boolean tflOperatedNationalRailStationsOnly, final ApiCallback<SearchResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopPointSearch_0ValidateBeforeCall(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
