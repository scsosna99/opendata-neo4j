/*
 * Transport for London Unified API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.tfl.api.client.client.api;

import uk.gov.tfl.api.client.client.ApiCallback;
import uk.gov.tfl.api.client.client.ApiClient;
import uk.gov.tfl.api.client.client.ApiException;
import uk.gov.tfl.api.client.client.ApiResponse;
import uk.gov.tfl.api.client.client.Configuration;
import uk.gov.tfl.api.client.client.Pair;
import uk.gov.tfl.api.client.client.ProgressRequestBody;
import uk.gov.tfl.api.client.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.tfl.api.client.client.model.Prediction;
import uk.gov.tfl.api.client.client.model.VehicleMatch;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VehicleApi {
    private ApiClient apiClient;

    public VehicleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VehicleApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for vehicleGet
     * @param ids A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vehicleGetCall(List<String> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Vehicle/{ids}/Arrivals"
            .replaceAll("\\{" + "ids" + "\\}", apiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vehicleGetValidateBeforeCall(List<String> ids, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling vehicleGet(Async)");
        }
        

        com.squareup.okhttp.Call call = vehicleGetCall(ids, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the predictions for a given list of vehicle Id&#39;s.
     * 
     * @param ids A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids. (required)
     * @return List&lt;Prediction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Prediction> vehicleGet(List<String> ids) throws ApiException {
        ApiResponse<List<Prediction>> resp = vehicleGetWithHttpInfo(ids);
        return resp.getData();
    }

    /**
     * Gets the predictions for a given list of vehicle Id&#39;s.
     * 
     * @param ids A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids. (required)
     * @return ApiResponse&lt;List&lt;Prediction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Prediction>> vehicleGetWithHttpInfo(List<String> ids) throws ApiException {
        com.squareup.okhttp.Call call = vehicleGetValidateBeforeCall(ids, null, null);
        Type localVarReturnType = new TypeToken<List<Prediction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the predictions for a given list of vehicle Id&#39;s. (asynchronously)
     * 
     * @param ids A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vehicleGetAsync(List<String> ids, final ApiCallback<List<Prediction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vehicleGetValidateBeforeCall(ids, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Prediction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vehicleGetEmissionsSurchargeCompliance
     * @param vrm The Vehicle Registration Mark (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vehicleGetEmissionsSurchargeComplianceCall(String vrm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Vehicle/EmissionSurcharge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vrm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vrm", vrm));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vehicleGetEmissionsSurchargeComplianceValidateBeforeCall(String vrm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vrm' is set
        if (vrm == null) {
            throw new ApiException("Missing the required parameter 'vrm' when calling vehicleGetEmissionsSurchargeCompliance(Async)");
        }
        

        com.squareup.okhttp.Call call = vehicleGetEmissionsSurchargeComplianceCall(vrm, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the Emissions Surcharge compliance for the Vehicle
     * 
     * @param vrm The Vehicle Registration Mark (required)
     * @return VehicleMatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VehicleMatch vehicleGetEmissionsSurchargeCompliance(String vrm) throws ApiException {
        ApiResponse<VehicleMatch> resp = vehicleGetEmissionsSurchargeComplianceWithHttpInfo(vrm);
        return resp.getData();
    }

    /**
     * Gets the Emissions Surcharge compliance for the Vehicle
     * 
     * @param vrm The Vehicle Registration Mark (required)
     * @return ApiResponse&lt;VehicleMatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VehicleMatch> vehicleGetEmissionsSurchargeComplianceWithHttpInfo(String vrm) throws ApiException {
        com.squareup.okhttp.Call call = vehicleGetEmissionsSurchargeComplianceValidateBeforeCall(vrm, null, null);
        Type localVarReturnType = new TypeToken<VehicleMatch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the Emissions Surcharge compliance for the Vehicle (asynchronously)
     * 
     * @param vrm The Vehicle Registration Mark (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vehicleGetEmissionsSurchargeComplianceAsync(String vrm, final ApiCallback<VehicleMatch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vehicleGetEmissionsSurchargeComplianceValidateBeforeCall(vrm, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VehicleMatch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vehicleGetUlezCompliance
     * @param vrm The Vehicle Registration Mark (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vehicleGetUlezComplianceCall(String vrm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Vehicle/UlezCompliance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vrm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vrm", vrm));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vehicleGetUlezComplianceValidateBeforeCall(String vrm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vrm' is set
        if (vrm == null) {
            throw new ApiException("Missing the required parameter 'vrm' when calling vehicleGetUlezCompliance(Async)");
        }
        

        com.squareup.okhttp.Call call = vehicleGetUlezComplianceCall(vrm, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the Ulez Surcharge compliance for the Vehicle
     * 
     * @param vrm The Vehicle Registration Mark (required)
     * @return VehicleMatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VehicleMatch vehicleGetUlezCompliance(String vrm) throws ApiException {
        ApiResponse<VehicleMatch> resp = vehicleGetUlezComplianceWithHttpInfo(vrm);
        return resp.getData();
    }

    /**
     * Gets the Ulez Surcharge compliance for the Vehicle
     * 
     * @param vrm The Vehicle Registration Mark (required)
     * @return ApiResponse&lt;VehicleMatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VehicleMatch> vehicleGetUlezComplianceWithHttpInfo(String vrm) throws ApiException {
        com.squareup.okhttp.Call call = vehicleGetUlezComplianceValidateBeforeCall(vrm, null, null);
        Type localVarReturnType = new TypeToken<VehicleMatch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the Ulez Surcharge compliance for the Vehicle (asynchronously)
     * 
     * @param vrm The Vehicle Registration Mark (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vehicleGetUlezComplianceAsync(String vrm, final ApiCallback<VehicleMatch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vehicleGetUlezComplianceValidateBeforeCall(vrm, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VehicleMatch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
