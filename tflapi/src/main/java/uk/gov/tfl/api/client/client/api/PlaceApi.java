/*
 * Transport for London Unified API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.tfl.api.client.client.api;

import uk.gov.tfl.api.client.client.ApiCallback;
import uk.gov.tfl.api.client.client.ApiClient;
import uk.gov.tfl.api.client.client.ApiException;
import uk.gov.tfl.api.client.client.ApiResponse;
import uk.gov.tfl.api.client.client.Configuration;
import uk.gov.tfl.api.client.client.Pair;
import uk.gov.tfl.api.client.client.ProgressRequestBody;
import uk.gov.tfl.api.client.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.tfl.api.client.client.model.Place;
import uk.gov.tfl.api.client.client.model.PlaceCategory;
import uk.gov.tfl.api.client.client.model.StopPoint;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaceApi {
    private ApiClient apiClient;

    public PlaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for placeGet
     * @param id The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids (required)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call placeGetCall(String id, Boolean includeChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeChildren", includeChildren));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call placeGetValidateBeforeCall(String id, Boolean includeChildren, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling placeGet(Async)");
        }
        

        com.squareup.okhttp.Call call = placeGetCall(id, includeChildren, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the place with the given id.
     * 
     * @param id The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids (required)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @return List&lt;Place&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Place> placeGet(String id, Boolean includeChildren) throws ApiException {
        ApiResponse<List<Place>> resp = placeGetWithHttpInfo(id, includeChildren);
        return resp.getData();
    }

    /**
     * Gets the place with the given id.
     * 
     * @param id The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids (required)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @return ApiResponse&lt;List&lt;Place&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Place>> placeGetWithHttpInfo(String id, Boolean includeChildren) throws ApiException {
        com.squareup.okhttp.Call call = placeGetValidateBeforeCall(id, includeChildren, null, null);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the place with the given id. (asynchronously)
     * 
     * @param id The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids (required)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call placeGetAsync(String id, Boolean includeChildren, final ApiCallback<List<Place>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = placeGetValidateBeforeCall(id, includeChildren, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for placeGetAt
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call placeGetAtCall(List<String> type, String lat, String lon, Double locationLat, Double locationLon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/{type}/At/{Lat}/{Lon}"
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lat", lat));
        if (lon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lon", lon));
        if (locationLat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location.lat", locationLat));
        if (locationLon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location.lon", locationLon));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call placeGetAtValidateBeforeCall(List<String> type, String lat, String lon, Double locationLat, Double locationLon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling placeGetAt(Async)");
        }
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling placeGetAt(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling placeGetAt(Async)");
        }
        
        // verify the required parameter 'locationLat' is set
        if (locationLat == null) {
            throw new ApiException("Missing the required parameter 'locationLat' when calling placeGetAt(Async)");
        }
        
        // verify the required parameter 'locationLon' is set
        if (locationLon == null) {
            throw new ApiException("Missing the required parameter 'locationLon' when calling placeGetAt(Async)");
        }
        

        com.squareup.okhttp.Call call = placeGetAtCall(type, lat, lon, locationLat, locationLon, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
     * 
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object placeGetAt(List<String> type, String lat, String lon, Double locationLat, Double locationLon) throws ApiException {
        ApiResponse<Object> resp = placeGetAtWithHttpInfo(type, lat, lon, locationLat, locationLon);
        return resp.getData();
    }

    /**
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
     * 
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> placeGetAtWithHttpInfo(List<String> type, String lat, String lon, Double locationLat, Double locationLon) throws ApiException {
        com.squareup.okhttp.Call call = placeGetAtValidateBeforeCall(type, lat, lon, locationLat, locationLon, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary. (asynchronously)
     * 
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call placeGetAtAsync(List<String> type, String lat, String lon, Double locationLat, Double locationLon, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = placeGetAtValidateBeforeCall(type, lat, lon, locationLat, locationLon, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for placeGetByGeoBox
     * @param bbBoxpointsSwLat  (required)
     * @param bbBoxpointsSwLon  (required)
     * @param bbBoxpointsNeLat  (required)
     * @param bbBoxpointsNeLon  (required)
     * @param categories an optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param type place types to filter on, or null to return all types (optional)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call placeGetByGeoBoxCall(Double bbBoxpointsSwLat, Double bbBoxpointsSwLon, Double bbBoxpointsNeLat, Double bbBoxpointsNeLon, List<String> categories, Boolean includeChildren, List<String> type, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (categories != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "categories", categories));
        if (includeChildren != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeChildren", includeChildren));
        if (type != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "type", type));
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("activeOnly", activeOnly));
        if (bbBoxpointsSwLat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bbBoxpoints.swLat", bbBoxpointsSwLat));
        if (bbBoxpointsSwLon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bbBoxpoints.swLon", bbBoxpointsSwLon));
        if (bbBoxpointsNeLat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bbBoxpoints.neLat", bbBoxpointsNeLat));
        if (bbBoxpointsNeLon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bbBoxpoints.neLon", bbBoxpointsNeLon));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call placeGetByGeoBoxValidateBeforeCall(Double bbBoxpointsSwLat, Double bbBoxpointsSwLon, Double bbBoxpointsNeLat, Double bbBoxpointsNeLon, List<String> categories, Boolean includeChildren, List<String> type, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'bbBoxpointsSwLat' is set
        if (bbBoxpointsSwLat == null) {
            throw new ApiException("Missing the required parameter 'bbBoxpointsSwLat' when calling placeGetByGeoBox(Async)");
        }
        
        // verify the required parameter 'bbBoxpointsSwLon' is set
        if (bbBoxpointsSwLon == null) {
            throw new ApiException("Missing the required parameter 'bbBoxpointsSwLon' when calling placeGetByGeoBox(Async)");
        }
        
        // verify the required parameter 'bbBoxpointsNeLat' is set
        if (bbBoxpointsNeLat == null) {
            throw new ApiException("Missing the required parameter 'bbBoxpointsNeLat' when calling placeGetByGeoBox(Async)");
        }
        
        // verify the required parameter 'bbBoxpointsNeLon' is set
        if (bbBoxpointsNeLon == null) {
            throw new ApiException("Missing the required parameter 'bbBoxpointsNeLon' when calling placeGetByGeoBox(Async)");
        }
        

        com.squareup.okhttp.Call call = placeGetByGeoBoxCall(bbBoxpointsSwLat, bbBoxpointsSwLon, bbBoxpointsNeLat, bbBoxpointsNeLon, categories, includeChildren, type, activeOnly, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the places that lie within the bounding box defined by the lat/lon of its north-west and south-east corners. Optionally filters              on type and can strip properties for a smaller payload.
     * 
     * @param bbBoxpointsSwLat  (required)
     * @param bbBoxpointsSwLon  (required)
     * @param bbBoxpointsNeLat  (required)
     * @param bbBoxpointsNeLon  (required)
     * @param categories an optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param type place types to filter on, or null to return all types (optional)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @return List&lt;StopPoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StopPoint> placeGetByGeoBox(Double bbBoxpointsSwLat, Double bbBoxpointsSwLon, Double bbBoxpointsNeLat, Double bbBoxpointsNeLon, List<String> categories, Boolean includeChildren, List<String> type, Boolean activeOnly) throws ApiException {
        ApiResponse<List<StopPoint>> resp = placeGetByGeoBoxWithHttpInfo(bbBoxpointsSwLat, bbBoxpointsSwLon, bbBoxpointsNeLat, bbBoxpointsNeLon, categories, includeChildren, type, activeOnly);
        return resp.getData();
    }

    /**
     * Gets the places that lie within the bounding box defined by the lat/lon of its north-west and south-east corners. Optionally filters              on type and can strip properties for a smaller payload.
     * 
     * @param bbBoxpointsSwLat  (required)
     * @param bbBoxpointsSwLon  (required)
     * @param bbBoxpointsNeLat  (required)
     * @param bbBoxpointsNeLon  (required)
     * @param categories an optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param type place types to filter on, or null to return all types (optional)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @return ApiResponse&lt;List&lt;StopPoint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StopPoint>> placeGetByGeoBoxWithHttpInfo(Double bbBoxpointsSwLat, Double bbBoxpointsSwLon, Double bbBoxpointsNeLat, Double bbBoxpointsNeLon, List<String> categories, Boolean includeChildren, List<String> type, Boolean activeOnly) throws ApiException {
        com.squareup.okhttp.Call call = placeGetByGeoBoxValidateBeforeCall(bbBoxpointsSwLat, bbBoxpointsSwLon, bbBoxpointsNeLat, bbBoxpointsNeLon, categories, includeChildren, type, activeOnly, null, null);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the places that lie within the bounding box defined by the lat/lon of its north-west and south-east corners. Optionally filters              on type and can strip properties for a smaller payload. (asynchronously)
     * 
     * @param bbBoxpointsSwLat  (required)
     * @param bbBoxpointsSwLon  (required)
     * @param bbBoxpointsNeLat  (required)
     * @param bbBoxpointsNeLon  (required)
     * @param categories an optional list of comma separated property categories to return in the Place&#39;s property bag. If null or empty, all categories of property are returned. Pass the keyword \&quot;none\&quot; to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint) (optional)
     * @param includeChildren Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned (optional)
     * @param type place types to filter on, or null to return all types (optional)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call placeGetByGeoBoxAsync(Double bbBoxpointsSwLat, Double bbBoxpointsSwLon, Double bbBoxpointsNeLat, Double bbBoxpointsNeLon, List<String> categories, Boolean includeChildren, List<String> type, Boolean activeOnly, final ApiCallback<List<StopPoint>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = placeGetByGeoBoxValidateBeforeCall(bbBoxpointsSwLat, bbBoxpointsSwLon, bbBoxpointsNeLat, bbBoxpointsNeLon, categories, includeChildren, type, activeOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StopPoint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for placeGetByType
     * @param types A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. (required)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call placeGetByTypeCall(List<String> types, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/Type/{types}"
            .replaceAll("\\{" + "types" + "\\}", apiClient.escapeString(types.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("activeOnly", activeOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call placeGetByTypeValidateBeforeCall(List<String> types, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'types' is set
        if (types == null) {
            throw new ApiException("Missing the required parameter 'types' when calling placeGetByType(Async)");
        }
        

        com.squareup.okhttp.Call call = placeGetByTypeCall(types, activeOnly, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all places of a given type
     * 
     * @param types A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. (required)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @return List&lt;Place&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Place> placeGetByType(List<String> types, Boolean activeOnly) throws ApiException {
        ApiResponse<List<Place>> resp = placeGetByTypeWithHttpInfo(types, activeOnly);
        return resp.getData();
    }

    /**
     * Gets all places of a given type
     * 
     * @param types A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. (required)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @return ApiResponse&lt;List&lt;Place&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Place>> placeGetByTypeWithHttpInfo(List<String> types, Boolean activeOnly) throws ApiException {
        com.squareup.okhttp.Call call = placeGetByTypeValidateBeforeCall(types, activeOnly, null, null);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all places of a given type (asynchronously)
     * 
     * @param types A comma-separated list of the types to return. Max. approx 12 types.              A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint. (required)
     * @param activeOnly An optional parameter to limit the results to active records only (Currently only the &#39;VariableMessageSign&#39; place type is supported) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call placeGetByTypeAsync(List<String> types, Boolean activeOnly, final ApiCallback<List<Place>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = placeGetByTypeValidateBeforeCall(types, activeOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for placeGetOverlay
     * @param z The zoom level (required)
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call placeGetOverlayCall(Integer z, List<String> type, Integer width, Integer height, String lat, String lon, Double locationLat, Double locationLon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}"
            .replaceAll("\\{" + "z" + "\\}", apiClient.escapeString(z.toString()))
            .replaceAll("\\{" + "type" + "\\}", apiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "width" + "\\}", apiClient.escapeString(width.toString()))
            .replaceAll("\\{" + "height" + "\\}", apiClient.escapeString(height.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lat", lat));
        if (lon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lon", lon));
        if (locationLat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location.lat", locationLat));
        if (locationLon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location.lon", locationLon));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call placeGetOverlayValidateBeforeCall(Integer z, List<String> type, Integer width, Integer height, String lat, String lon, Double locationLat, Double locationLon, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling placeGetOverlay(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling placeGetOverlay(Async)");
        }
        
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling placeGetOverlay(Async)");
        }
        
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling placeGetOverlay(Async)");
        }
        
        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling placeGetOverlay(Async)");
        }
        
        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling placeGetOverlay(Async)");
        }
        
        // verify the required parameter 'locationLat' is set
        if (locationLat == null) {
            throw new ApiException("Missing the required parameter 'locationLat' when calling placeGetOverlay(Async)");
        }
        
        // verify the required parameter 'locationLon' is set
        if (locationLon == null) {
            throw new ApiException("Missing the required parameter 'locationLon' when calling placeGetOverlay(Async)");
        }
        

        com.squareup.okhttp.Call call = placeGetOverlayCall(z, type, width, height, lat, lon, locationLat, locationLon, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the place overlay for a given set of co-ordinates and a given width/height.
     * 
     * @param z The zoom level (required)
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object placeGetOverlay(Integer z, List<String> type, Integer width, Integer height, String lat, String lon, Double locationLat, Double locationLon) throws ApiException {
        ApiResponse<Object> resp = placeGetOverlayWithHttpInfo(z, type, width, height, lat, lon, locationLat, locationLon);
        return resp.getData();
    }

    /**
     * Gets the place overlay for a given set of co-ordinates and a given width/height.
     * 
     * @param z The zoom level (required)
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> placeGetOverlayWithHttpInfo(Integer z, List<String> type, Integer width, Integer height, String lat, String lon, Double locationLat, Double locationLon) throws ApiException {
        com.squareup.okhttp.Call call = placeGetOverlayValidateBeforeCall(z, type, width, height, lat, lon, locationLat, locationLon, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the place overlay for a given set of co-ordinates and a given width/height. (asynchronously)
     * 
     * @param z The zoom level (required)
     * @param type The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint) (required)
     * @param width The width of the requested overlay. (required)
     * @param height The height of the requested overlay. (required)
     * @param lat  (required)
     * @param lon  (required)
     * @param locationLat  (required)
     * @param locationLon  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call placeGetOverlayAsync(Integer z, List<String> type, Integer width, Integer height, String lat, String lon, Double locationLat, Double locationLon, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = placeGetOverlayValidateBeforeCall(z, type, width, height, lat, lon, locationLat, locationLon, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for placeGetStreetsByPostCode
     * @param postcode  (required)
     * @param postcodeInputPostcode  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call placeGetStreetsByPostCodeCall(String postcode, String postcodeInputPostcode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/Address/Streets/{Postcode}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (postcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("postcode", postcode));
        if (postcodeInputPostcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("postcodeInput.postcode", postcodeInputPostcode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call placeGetStreetsByPostCodeValidateBeforeCall(String postcode, String postcodeInputPostcode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'postcode' is set
        if (postcode == null) {
            throw new ApiException("Missing the required parameter 'postcode' when calling placeGetStreetsByPostCode(Async)");
        }
        

        com.squareup.okhttp.Call call = placeGetStreetsByPostCodeCall(postcode, postcodeInputPostcode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the set of streets associated with a post code.
     * 
     * @param postcode  (required)
     * @param postcodeInputPostcode  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object placeGetStreetsByPostCode(String postcode, String postcodeInputPostcode) throws ApiException {
        ApiResponse<Object> resp = placeGetStreetsByPostCodeWithHttpInfo(postcode, postcodeInputPostcode);
        return resp.getData();
    }

    /**
     * Gets the set of streets associated with a post code.
     * 
     * @param postcode  (required)
     * @param postcodeInputPostcode  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> placeGetStreetsByPostCodeWithHttpInfo(String postcode, String postcodeInputPostcode) throws ApiException {
        com.squareup.okhttp.Call call = placeGetStreetsByPostCodeValidateBeforeCall(postcode, postcodeInputPostcode, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the set of streets associated with a post code. (asynchronously)
     * 
     * @param postcode  (required)
     * @param postcodeInputPostcode  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call placeGetStreetsByPostCodeAsync(String postcode, String postcodeInputPostcode, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = placeGetStreetsByPostCodeValidateBeforeCall(postcode, postcodeInputPostcode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for placeMetaCategories
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call placeMetaCategoriesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/Meta/Categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call placeMetaCategoriesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = placeMetaCategoriesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of all of the available place property categories and keys.
     * 
     * @return List&lt;PlaceCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PlaceCategory> placeMetaCategories() throws ApiException {
        ApiResponse<List<PlaceCategory>> resp = placeMetaCategoriesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets a list of all of the available place property categories and keys.
     * 
     * @return ApiResponse&lt;List&lt;PlaceCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PlaceCategory>> placeMetaCategoriesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = placeMetaCategoriesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<PlaceCategory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of all of the available place property categories and keys. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call placeMetaCategoriesAsync(final ApiCallback<List<PlaceCategory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = placeMetaCategoriesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PlaceCategory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for placeMetaPlaceTypes
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call placeMetaPlaceTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/Meta/PlaceTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call placeMetaPlaceTypesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = placeMetaPlaceTypesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of the available types of Place.
     * 
     * @return List&lt;PlaceCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PlaceCategory> placeMetaPlaceTypes() throws ApiException {
        ApiResponse<List<PlaceCategory>> resp = placeMetaPlaceTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets a list of the available types of Place.
     * 
     * @return ApiResponse&lt;List&lt;PlaceCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PlaceCategory>> placeMetaPlaceTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = placeMetaPlaceTypesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<PlaceCategory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of the available types of Place. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call placeMetaPlaceTypesAsync(final ApiCallback<List<PlaceCategory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = placeMetaPlaceTypesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PlaceCategory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for placeSearch
     * @param name The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. (required)
     * @param types A comma-separated list of the types to return. Max. approx 12 types. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call placeSearchCall(String name, List<String> types, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Place/Search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (types != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "types", types));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call placeSearchValidateBeforeCall(String name, List<String> types, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling placeSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = placeSearchCall(name, types, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all places that matches the given query
     * 
     * @param name The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. (required)
     * @param types A comma-separated list of the types to return. Max. approx 12 types. (optional)
     * @return List&lt;Place&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Place> placeSearch(String name, List<String> types) throws ApiException {
        ApiResponse<List<Place>> resp = placeSearchWithHttpInfo(name, types);
        return resp.getData();
    }

    /**
     * Gets all places that matches the given query
     * 
     * @param name The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. (required)
     * @param types A comma-separated list of the types to return. Max. approx 12 types. (optional)
     * @return ApiResponse&lt;List&lt;Place&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Place>> placeSearchWithHttpInfo(String name, List<String> types) throws ApiException {
        com.squareup.okhttp.Call call = placeSearchValidateBeforeCall(name, types, null, null);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all places that matches the given query (asynchronously)
     * 
     * @param name The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names. (required)
     * @param types A comma-separated list of the types to return. Max. approx 12 types. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call placeSearchAsync(String name, List<String> types, final ApiCallback<List<Place>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = placeSearchValidateBeforeCall(name, types, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Place>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
