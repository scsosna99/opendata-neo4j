/*
 * Transport for London Unified API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.tfl.api.client.client.api;

import uk.gov.tfl.api.client.client.ApiCallback;
import uk.gov.tfl.api.client.client.ApiClient;
import uk.gov.tfl.api.client.client.ApiException;
import uk.gov.tfl.api.client.client.ApiResponse;
import uk.gov.tfl.api.client.client.Configuration;
import uk.gov.tfl.api.client.client.Pair;
import uk.gov.tfl.api.client.client.ProgressRequestBody;
import uk.gov.tfl.api.client.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.tfl.api.client.client.model.ItineraryResult;
import uk.gov.tfl.api.client.client.model.Mode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JourneyApi {
    private ApiClient apiClient;

    public JourneyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JourneyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for journeyJourneyResults
     * @param from Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param to Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param via Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)
     * @param nationalSearch Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)
     * @param date The date must be in yyyyMMdd format (optional)
     * @param time The time must be in HHmm format (optional)
     * @param timeIs Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)
     * @param journeyPreference The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)
     * @param mode The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)
     * @param accessibilityPreference The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)
     * @param fromName An optional name to associate with the origin of the journey in the results. (optional)
     * @param toName An optional name to associate with the destination of the journey in the results. (optional)
     * @param viaName An optional name to associate with the via point of the journey in the results. (optional)
     * @param maxTransferMinutes The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)
     * @param maxWalkingMinutes The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)
     * @param walkingSpeed The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)
     * @param cyclePreference The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)
     * @param adjustment Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)
     * @param bikeProficiency A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)
     * @param alternativeCycle Option to determine whether to return alternative cycling journey (optional)
     * @param alternativeWalking Option to determine whether to return alternative walking journey (optional)
     * @param applyHtmlMarkup Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)
     * @param useMultiModalCall A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)
     * @param walkingOptimization A boolean to indicate whether to optimize journeys using walking (optional)
     * @param taxiOnlyTrip A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call journeyJourneyResultsCall(String from, String to, String via, Boolean nationalSearch, String date, String time, String timeIs, String journeyPreference, List<String> mode, List<String> accessibilityPreference, String fromName, String toName, String viaName, String maxTransferMinutes, String maxWalkingMinutes, String walkingSpeed, String cyclePreference, String adjustment, List<String> bikeProficiency, Boolean alternativeCycle, Boolean alternativeWalking, Boolean applyHtmlMarkup, Boolean useMultiModalCall, Boolean walkingOptimization, Boolean taxiOnlyTrip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Journey/JourneyResults/{from}/to/{to}"
            .replaceAll("\\{" + "from" + "\\}", apiClient.escapeString(from.toString()))
            .replaceAll("\\{" + "to" + "\\}", apiClient.escapeString(to.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (via != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("via", via));
        if (nationalSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("nationalSearch", nationalSearch));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (time != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("time", time));
        if (timeIs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("timeIs", timeIs));
        if (journeyPreference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("journeyPreference", journeyPreference));
        if (mode != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "mode", mode));
        if (accessibilityPreference != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "accessibilityPreference", accessibilityPreference));
        if (fromName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fromName", fromName));
        if (toName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toName", toName));
        if (viaName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("viaName", viaName));
        if (maxTransferMinutes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxTransferMinutes", maxTransferMinutes));
        if (maxWalkingMinutes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxWalkingMinutes", maxWalkingMinutes));
        if (walkingSpeed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("walkingSpeed", walkingSpeed));
        if (cyclePreference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cyclePreference", cyclePreference));
        if (adjustment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("adjustment", adjustment));
        if (bikeProficiency != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "bikeProficiency", bikeProficiency));
        if (alternativeCycle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alternativeCycle", alternativeCycle));
        if (alternativeWalking != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alternativeWalking", alternativeWalking));
        if (applyHtmlMarkup != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applyHtmlMarkup", applyHtmlMarkup));
        if (useMultiModalCall != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useMultiModalCall", useMultiModalCall));
        if (walkingOptimization != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("walkingOptimization", walkingOptimization));
        if (taxiOnlyTrip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("taxiOnlyTrip", taxiOnlyTrip));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call journeyJourneyResultsValidateBeforeCall(String from, String to, String via, Boolean nationalSearch, String date, String time, String timeIs, String journeyPreference, List<String> mode, List<String> accessibilityPreference, String fromName, String toName, String viaName, String maxTransferMinutes, String maxWalkingMinutes, String walkingSpeed, String cyclePreference, String adjustment, List<String> bikeProficiency, Boolean alternativeCycle, Boolean alternativeWalking, Boolean applyHtmlMarkup, Boolean useMultiModalCall, Boolean walkingOptimization, Boolean taxiOnlyTrip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling journeyJourneyResults(Async)");
        }
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling journeyJourneyResults(Async)");
        }
        

        com.squareup.okhttp.Call call = journeyJourneyResultsCall(from, to, via, nationalSearch, date, time, timeIs, journeyPreference, mode, accessibilityPreference, fromName, toName, viaName, maxTransferMinutes, maxWalkingMinutes, walkingSpeed, cyclePreference, adjustment, bikeProficiency, alternativeCycle, alternativeWalking, applyHtmlMarkup, useMultiModalCall, walkingOptimization, taxiOnlyTrip, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Perform a Journey Planner search from the parameters specified in simple types
     * 
     * @param from Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param to Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param via Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)
     * @param nationalSearch Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)
     * @param date The date must be in yyyyMMdd format (optional)
     * @param time The time must be in HHmm format (optional)
     * @param timeIs Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)
     * @param journeyPreference The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)
     * @param mode The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)
     * @param accessibilityPreference The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)
     * @param fromName An optional name to associate with the origin of the journey in the results. (optional)
     * @param toName An optional name to associate with the destination of the journey in the results. (optional)
     * @param viaName An optional name to associate with the via point of the journey in the results. (optional)
     * @param maxTransferMinutes The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)
     * @param maxWalkingMinutes The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)
     * @param walkingSpeed The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)
     * @param cyclePreference The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)
     * @param adjustment Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)
     * @param bikeProficiency A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)
     * @param alternativeCycle Option to determine whether to return alternative cycling journey (optional)
     * @param alternativeWalking Option to determine whether to return alternative walking journey (optional)
     * @param applyHtmlMarkup Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)
     * @param useMultiModalCall A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)
     * @param walkingOptimization A boolean to indicate whether to optimize journeys using walking (optional)
     * @param taxiOnlyTrip A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)
     * @return ItineraryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItineraryResult journeyJourneyResults(String from, String to, String via, Boolean nationalSearch, String date, String time, String timeIs, String journeyPreference, List<String> mode, List<String> accessibilityPreference, String fromName, String toName, String viaName, String maxTransferMinutes, String maxWalkingMinutes, String walkingSpeed, String cyclePreference, String adjustment, List<String> bikeProficiency, Boolean alternativeCycle, Boolean alternativeWalking, Boolean applyHtmlMarkup, Boolean useMultiModalCall, Boolean walkingOptimization, Boolean taxiOnlyTrip) throws ApiException {
        ApiResponse<ItineraryResult> resp = journeyJourneyResultsWithHttpInfo(from, to, via, nationalSearch, date, time, timeIs, journeyPreference, mode, accessibilityPreference, fromName, toName, viaName, maxTransferMinutes, maxWalkingMinutes, walkingSpeed, cyclePreference, adjustment, bikeProficiency, alternativeCycle, alternativeWalking, applyHtmlMarkup, useMultiModalCall, walkingOptimization, taxiOnlyTrip);
        return resp.getData();
    }

    /**
     * Perform a Journey Planner search from the parameters specified in simple types
     * 
     * @param from Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param to Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param via Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)
     * @param nationalSearch Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)
     * @param date The date must be in yyyyMMdd format (optional)
     * @param time The time must be in HHmm format (optional)
     * @param timeIs Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)
     * @param journeyPreference The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)
     * @param mode The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)
     * @param accessibilityPreference The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)
     * @param fromName An optional name to associate with the origin of the journey in the results. (optional)
     * @param toName An optional name to associate with the destination of the journey in the results. (optional)
     * @param viaName An optional name to associate with the via point of the journey in the results. (optional)
     * @param maxTransferMinutes The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)
     * @param maxWalkingMinutes The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)
     * @param walkingSpeed The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)
     * @param cyclePreference The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)
     * @param adjustment Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)
     * @param bikeProficiency A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)
     * @param alternativeCycle Option to determine whether to return alternative cycling journey (optional)
     * @param alternativeWalking Option to determine whether to return alternative walking journey (optional)
     * @param applyHtmlMarkup Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)
     * @param useMultiModalCall A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)
     * @param walkingOptimization A boolean to indicate whether to optimize journeys using walking (optional)
     * @param taxiOnlyTrip A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)
     * @return ApiResponse&lt;ItineraryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItineraryResult> journeyJourneyResultsWithHttpInfo(String from, String to, String via, Boolean nationalSearch, String date, String time, String timeIs, String journeyPreference, List<String> mode, List<String> accessibilityPreference, String fromName, String toName, String viaName, String maxTransferMinutes, String maxWalkingMinutes, String walkingSpeed, String cyclePreference, String adjustment, List<String> bikeProficiency, Boolean alternativeCycle, Boolean alternativeWalking, Boolean applyHtmlMarkup, Boolean useMultiModalCall, Boolean walkingOptimization, Boolean taxiOnlyTrip) throws ApiException {
        com.squareup.okhttp.Call call = journeyJourneyResultsValidateBeforeCall(from, to, via, nationalSearch, date, time, timeIs, journeyPreference, mode, accessibilityPreference, fromName, toName, viaName, maxTransferMinutes, maxWalkingMinutes, walkingSpeed, cyclePreference, adjustment, bikeProficiency, alternativeCycle, alternativeWalking, applyHtmlMarkup, useMultiModalCall, walkingOptimization, taxiOnlyTrip, null, null);
        Type localVarReturnType = new TypeToken<ItineraryResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Perform a Journey Planner search from the parameters specified in simple types (asynchronously)
     * 
     * @param from Origin of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param to Destination of the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (required)
     * @param via Travel through point on the journey. Can be WGS84 coordinates expressed as \&quot;lat,long\&quot;, a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name). (optional)
     * @param nationalSearch Does the journey cover stops outside London? eg. \&quot;nationalSearch&#x3D;true\&quot; (optional)
     * @param date The date must be in yyyyMMdd format (optional)
     * @param time The time must be in HHmm format (optional)
     * @param timeIs Does the time given relate to arrival or leaving time? Possible options: \&quot;departing\&quot; | \&quot;arriving\&quot; (optional)
     * @param journeyPreference The journey preference eg possible options: \&quot;leastinterchange\&quot; | \&quot;leasttime\&quot; | \&quot;leastwalking\&quot; (optional)
     * @param mode The mode must be a comma separated list of modes. eg possible options: \&quot;public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\&quot; (optional)
     * @param accessibilityPreference The accessibility preference must be a comma separated list eg. \&quot;noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\&quot; (optional)
     * @param fromName An optional name to associate with the origin of the journey in the results. (optional)
     * @param toName An optional name to associate with the destination of the journey in the results. (optional)
     * @param viaName An optional name to associate with the via point of the journey in the results. (optional)
     * @param maxTransferMinutes The max walking time in minutes for transfer eg. \&quot;120\&quot; (optional)
     * @param maxWalkingMinutes The max walking time in minutes for journeys eg. \&quot;120\&quot; (optional)
     * @param walkingSpeed The walking speed. eg possible options: \&quot;slow\&quot; | \&quot;average\&quot; | \&quot;fast\&quot;. (optional)
     * @param cyclePreference The cycle preference. eg possible options: \&quot;allTheWay\&quot; | \&quot;leaveAtStation\&quot; | \&quot;takeOnTransport\&quot; | \&quot;cycleHire\&quot; (optional)
     * @param adjustment Time adjustment command. eg possible options: \&quot;TripFirst\&quot; | \&quot;TripLast\&quot; (optional)
     * @param bikeProficiency A comma separated list of cycling proficiency levels. eg possible options: \&quot;easy,moderate,fast\&quot; (optional)
     * @param alternativeCycle Option to determine whether to return alternative cycling journey (optional)
     * @param alternativeWalking Option to determine whether to return alternative walking journey (optional)
     * @param applyHtmlMarkup Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not. (optional)
     * @param useMultiModalCall A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey (optional)
     * @param walkingOptimization A boolean to indicate whether to optimize journeys using walking (optional)
     * @param taxiOnlyTrip A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override \&quot;useMultiModalCall\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call journeyJourneyResultsAsync(String from, String to, String via, Boolean nationalSearch, String date, String time, String timeIs, String journeyPreference, List<String> mode, List<String> accessibilityPreference, String fromName, String toName, String viaName, String maxTransferMinutes, String maxWalkingMinutes, String walkingSpeed, String cyclePreference, String adjustment, List<String> bikeProficiency, Boolean alternativeCycle, Boolean alternativeWalking, Boolean applyHtmlMarkup, Boolean useMultiModalCall, Boolean walkingOptimization, Boolean taxiOnlyTrip, final ApiCallback<ItineraryResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = journeyJourneyResultsValidateBeforeCall(from, to, via, nationalSearch, date, time, timeIs, journeyPreference, mode, accessibilityPreference, fromName, toName, viaName, maxTransferMinutes, maxWalkingMinutes, walkingSpeed, cyclePreference, adjustment, bikeProficiency, alternativeCycle, alternativeWalking, applyHtmlMarkup, useMultiModalCall, walkingOptimization, taxiOnlyTrip, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItineraryResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for journeyMeta
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call journeyMetaCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Journey/Meta/Modes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call journeyMetaValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = journeyMetaCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of all of the available journey planner modes
     * 
     * @return List&lt;Mode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Mode> journeyMeta() throws ApiException {
        ApiResponse<List<Mode>> resp = journeyMetaWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets a list of all of the available journey planner modes
     * 
     * @return ApiResponse&lt;List&lt;Mode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Mode>> journeyMetaWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = journeyMetaValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Mode>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of all of the available journey planner modes (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call journeyMetaAsync(final ApiCallback<List<Mode>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = journeyMetaValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Mode>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
