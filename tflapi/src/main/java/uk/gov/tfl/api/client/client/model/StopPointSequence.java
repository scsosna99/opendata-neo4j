/*
 * Transport for London Unified API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.tfl.api.client.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * StopPointSequence
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-01-12T14:08:15.676-06:00")
public class StopPointSequence {
  @SerializedName("lineId")
  private String lineId = null;

  @SerializedName("lineName")
  private String lineName = null;

  @SerializedName("direction")
  private String direction = null;

  @SerializedName("branchId")
  private Integer branchId = null;

  @SerializedName("nextBranchIds")
  private List<Integer> nextBranchIds = null;

  @SerializedName("prevBranchIds")
  private List<Integer> prevBranchIds = null;

  @SerializedName("stopPoint")
  private List<MatchedStop> stopPoint = null;

  /**
   * Gets or Sets serviceType
   */
  @JsonAdapter(ServiceTypeEnum.Adapter.class)
  public enum ServiceTypeEnum {
    REGULAR("Regular"),
    
    NIGHT("Night");

    private String value;

    ServiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceTypeEnum fromValue(String text) {
      for (ServiceTypeEnum b : ServiceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ServiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ServiceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("serviceType")
  private ServiceTypeEnum serviceType = null;

  public StopPointSequence lineId(String lineId) {
    this.lineId = lineId;
    return this;
  }

   /**
   * Get lineId
   * @return lineId
  **/
  @ApiModelProperty(value = "")
  public String getLineId() {
    return lineId;
  }

  public void setLineId(String lineId) {
    this.lineId = lineId;
  }

  public StopPointSequence lineName(String lineName) {
    this.lineName = lineName;
    return this;
  }

   /**
   * Get lineName
   * @return lineName
  **/
  @ApiModelProperty(value = "")
  public String getLineName() {
    return lineName;
  }

  public void setLineName(String lineName) {
    this.lineName = lineName;
  }

  public StopPointSequence direction(String direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @ApiModelProperty(value = "")
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }

  public StopPointSequence branchId(Integer branchId) {
    this.branchId = branchId;
    return this;
  }

   /**
   * The id of this branch.
   * @return branchId
  **/
  @ApiModelProperty(value = "The id of this branch.")
  public Integer getBranchId() {
    return branchId;
  }

  public void setBranchId(Integer branchId) {
    this.branchId = branchId;
  }

  public StopPointSequence nextBranchIds(List<Integer> nextBranchIds) {
    this.nextBranchIds = nextBranchIds;
    return this;
  }

  public StopPointSequence addNextBranchIdsItem(Integer nextBranchIdsItem) {
    if (this.nextBranchIds == null) {
      this.nextBranchIds = new ArrayList<Integer>();
    }
    this.nextBranchIds.add(nextBranchIdsItem);
    return this;
  }

   /**
   * The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
   * @return nextBranchIds
  **/
  @ApiModelProperty(value = "The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.")
  public List<Integer> getNextBranchIds() {
    return nextBranchIds;
  }

  public void setNextBranchIds(List<Integer> nextBranchIds) {
    this.nextBranchIds = nextBranchIds;
  }

  public StopPointSequence prevBranchIds(List<Integer> prevBranchIds) {
    this.prevBranchIds = prevBranchIds;
    return this;
  }

  public StopPointSequence addPrevBranchIdsItem(Integer prevBranchIdsItem) {
    if (this.prevBranchIds == null) {
      this.prevBranchIds = new ArrayList<Integer>();
    }
    this.prevBranchIds.add(prevBranchIdsItem);
    return this;
  }

   /**
   * The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.
   * @return prevBranchIds
  **/
  @ApiModelProperty(value = "The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be              identical in the case of a looped route e.g. the Circle line.")
  public List<Integer> getPrevBranchIds() {
    return prevBranchIds;
  }

  public void setPrevBranchIds(List<Integer> prevBranchIds) {
    this.prevBranchIds = prevBranchIds;
  }

  public StopPointSequence stopPoint(List<MatchedStop> stopPoint) {
    this.stopPoint = stopPoint;
    return this;
  }

  public StopPointSequence addStopPointItem(MatchedStop stopPointItem) {
    if (this.stopPoint == null) {
      this.stopPoint = new ArrayList<MatchedStop>();
    }
    this.stopPoint.add(stopPointItem);
    return this;
  }

   /**
   * Get stopPoint
   * @return stopPoint
  **/
  @ApiModelProperty(value = "")
  public List<MatchedStop> getStopPoint() {
    return stopPoint;
  }

  public void setStopPoint(List<MatchedStop> stopPoint) {
    this.stopPoint = stopPoint;
  }

  public StopPointSequence serviceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Get serviceType
   * @return serviceType
  **/
  @ApiModelProperty(value = "")
  public ServiceTypeEnum getServiceType() {
    return serviceType;
  }

  public void setServiceType(ServiceTypeEnum serviceType) {
    this.serviceType = serviceType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StopPointSequence stopPointSequence = (StopPointSequence) o;
    return Objects.equals(this.lineId, stopPointSequence.lineId) &&
        Objects.equals(this.lineName, stopPointSequence.lineName) &&
        Objects.equals(this.direction, stopPointSequence.direction) &&
        Objects.equals(this.branchId, stopPointSequence.branchId) &&
        Objects.equals(this.nextBranchIds, stopPointSequence.nextBranchIds) &&
        Objects.equals(this.prevBranchIds, stopPointSequence.prevBranchIds) &&
        Objects.equals(this.stopPoint, stopPointSequence.stopPoint) &&
        Objects.equals(this.serviceType, stopPointSequence.serviceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lineId, lineName, direction, branchId, nextBranchIds, prevBranchIds, stopPoint, serviceType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StopPointSequence {\n");
    
    sb.append("    lineId: ").append(toIndentedString(lineId)).append("\n");
    sb.append("    lineName: ").append(toIndentedString(lineName)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    branchId: ").append(toIndentedString(branchId)).append("\n");
    sb.append("    nextBranchIds: ").append(toIndentedString(nextBranchIds)).append("\n");
    sb.append("    prevBranchIds: ").append(toIndentedString(prevBranchIds)).append("\n");
    sb.append("    stopPoint: ").append(toIndentedString(stopPoint)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

