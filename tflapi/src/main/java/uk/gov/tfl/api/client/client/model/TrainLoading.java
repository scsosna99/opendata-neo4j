/*
 * Transport for London Unified API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.tfl.api.client.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

/**
 * TrainLoading
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-01-12T14:08:15.676-06:00")
public class TrainLoading {
  @SerializedName("line")
  private String line = null;

  @SerializedName("lineDirection")
  private String lineDirection = null;

  @SerializedName("platformDirection")
  private String platformDirection = null;

  @SerializedName("direction")
  private String direction = null;

  @SerializedName("naptanTo")
  private String naptanTo = null;

  @SerializedName("timeSlice")
  private String timeSlice = null;

  @SerializedName("value")
  private Integer value = null;

  public TrainLoading line(String line) {
    this.line = line;
    return this;
  }

   /**
   * The Line Name e.g. \&quot;Victoria\&quot;
   * @return line
  **/
  @ApiModelProperty(value = "The Line Name e.g. \"Victoria\"")
  public String getLine() {
    return line;
  }

  public void setLine(String line) {
    this.line = line;
  }

  public TrainLoading lineDirection(String lineDirection) {
    this.lineDirection = lineDirection;
    return this;
  }

   /**
   * Direction of the Line e.g. NB, SB, WB etc.
   * @return lineDirection
  **/
  @ApiModelProperty(value = "Direction of the Line e.g. NB, SB, WB etc.")
  public String getLineDirection() {
    return lineDirection;
  }

  public void setLineDirection(String lineDirection) {
    this.lineDirection = lineDirection;
  }

  public TrainLoading platformDirection(String platformDirection) {
    this.platformDirection = platformDirection;
    return this;
  }

   /**
   * Direction displayed on the platform e.g. NB, SB, WB etc.
   * @return platformDirection
  **/
  @ApiModelProperty(value = "Direction displayed on the platform e.g. NB, SB, WB etc.")
  public String getPlatformDirection() {
    return platformDirection;
  }

  public void setPlatformDirection(String platformDirection) {
    this.platformDirection = platformDirection;
  }

  public TrainLoading direction(String direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Direction in regards to Journey Planner i.e. inbound or outbound
   * @return direction
  **/
  @ApiModelProperty(value = "Direction in regards to Journey Planner i.e. inbound or outbound")
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }

  public TrainLoading naptanTo(String naptanTo) {
    this.naptanTo = naptanTo;
    return this;
  }

   /**
   * Naptan of the adjacent station
   * @return naptanTo
  **/
  @ApiModelProperty(value = "Naptan of the adjacent station")
  public String getNaptanTo() {
    return naptanTo;
  }

  public void setNaptanTo(String naptanTo) {
    this.naptanTo = naptanTo;
  }

  public TrainLoading timeSlice(String timeSlice) {
    this.timeSlice = timeSlice;
    return this;
  }

   /**
   * Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.
   * @return timeSlice
  **/
  @ApiModelProperty(value = "Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.")
  public String getTimeSlice() {
    return timeSlice;
  }

  public void setTimeSlice(String timeSlice) {
    this.timeSlice = timeSlice;
  }

  public TrainLoading value(Integer value) {
    this.value = value;
    return this;
  }

   /**
   * Scale between 1-6,                1 &#x3D; Very quiet, 2 &#x3D; Quiet, 3 &#x3D; Fairly busy, 4 &#x3D; Busy, 5 &#x3D; Very busy, 6 &#x3D; Exceptionally busy
   * @return value
  **/
  @ApiModelProperty(value = "Scale between 1-6,                1 = Very quiet, 2 = Quiet, 3 = Fairly busy, 4 = Busy, 5 = Very busy, 6 = Exceptionally busy")
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrainLoading trainLoading = (TrainLoading) o;
    return Objects.equals(this.line, trainLoading.line) &&
        Objects.equals(this.lineDirection, trainLoading.lineDirection) &&
        Objects.equals(this.platformDirection, trainLoading.platformDirection) &&
        Objects.equals(this.direction, trainLoading.direction) &&
        Objects.equals(this.naptanTo, trainLoading.naptanTo) &&
        Objects.equals(this.timeSlice, trainLoading.timeSlice) &&
        Objects.equals(this.value, trainLoading.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(line, lineDirection, platformDirection, direction, naptanTo, timeSlice, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrainLoading {\n");
    
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    lineDirection: ").append(toIndentedString(lineDirection)).append("\n");
    sb.append("    platformDirection: ").append(toIndentedString(platformDirection)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    naptanTo: ").append(toIndentedString(naptanTo)).append("\n");
    sb.append("    timeSlice: ").append(toIndentedString(timeSlice)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

