/*
 * Transport for London Unified API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.tfl.api.client.client.api;

import uk.gov.tfl.api.client.client.ApiException;
import uk.gov.tfl.api.client.client.model.Place;
import uk.gov.tfl.api.client.client.model.PlaceCategory;
import uk.gov.tfl.api.client.client.model.StopPoint;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for PlaceApi
 */
@Ignore
public class PlaceApiTest {

    private final PlaceApi api = new PlaceApi();

    
    /**
     * Gets the place with the given id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void placeGetTest() throws ApiException {
        String id = null;
        Boolean includeChildren = null;
        List<Place> response = api.placeGet(id, includeChildren);

        // TODO: test validations
    }
    
    /**
     * Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place              must be polygonal e.g. a BoroughBoundary.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void placeGetAtTest() throws ApiException {
        List<String> type = null;
        String lat = null;
        String lon = null;
        Double locationLat = null;
        Double locationLon = null;
        Object response = api.placeGetAt(type, lat, lon, locationLat, locationLon);

        // TODO: test validations
    }
    
    /**
     * Gets the places that lie within the bounding box defined by the lat/lon of its north-west and south-east corners. Optionally filters              on type and can strip properties for a smaller payload.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void placeGetByGeoBoxTest() throws ApiException {
        Double bbBoxpointsSwLat = null;
        Double bbBoxpointsSwLon = null;
        Double bbBoxpointsNeLat = null;
        Double bbBoxpointsNeLon = null;
        List<String> categories = null;
        Boolean includeChildren = null;
        List<String> type = null;
        Boolean activeOnly = null;
        List<StopPoint> response = api.placeGetByGeoBox(bbBoxpointsSwLat, bbBoxpointsSwLon, bbBoxpointsNeLat, bbBoxpointsNeLon, categories, includeChildren, type, activeOnly);

        // TODO: test validations
    }
    
    /**
     * Gets all places of a given type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void placeGetByTypeTest() throws ApiException {
        List<String> types = null;
        Boolean activeOnly = null;
        List<Place> response = api.placeGetByType(types, activeOnly);

        // TODO: test validations
    }
    
    /**
     * Gets the place overlay for a given set of co-ordinates and a given width/height.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void placeGetOverlayTest() throws ApiException {
        Integer z = null;
        List<String> type = null;
        Integer width = null;
        Integer height = null;
        String lat = null;
        String lon = null;
        Double locationLat = null;
        Double locationLon = null;
        Object response = api.placeGetOverlay(z, type, width, height, lat, lon, locationLat, locationLon);

        // TODO: test validations
    }
    
    /**
     * Gets the set of streets associated with a post code.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void placeGetStreetsByPostCodeTest() throws ApiException {
        String postcode = null;
        String postcodeInputPostcode = null;
        Object response = api.placeGetStreetsByPostCode(postcode, postcodeInputPostcode);

        // TODO: test validations
    }
    
    /**
     * Gets a list of all of the available place property categories and keys.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void placeMetaCategoriesTest() throws ApiException {
        List<PlaceCategory> response = api.placeMetaCategories();

        // TODO: test validations
    }
    
    /**
     * Gets a list of the available types of Place.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void placeMetaPlaceTypesTest() throws ApiException {
        List<PlaceCategory> response = api.placeMetaPlaceTypes();

        // TODO: test validations
    }
    
    /**
     * Gets all places that matches the given query
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void placeSearchTest() throws ApiException {
        String name = null;
        List<String> types = null;
        List<Place> response = api.placeSearch(name, types);

        // TODO: test validations
    }
    
}
