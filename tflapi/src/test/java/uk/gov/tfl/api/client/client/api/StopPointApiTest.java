/*
 * Transport for London Unified API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.gov.tfl.api.client.client.api;

import uk.gov.tfl.api.client.client.ApiException;
import uk.gov.tfl.api.client.client.model.DisruptedPoint;
import uk.gov.tfl.api.client.client.model.LineServiceType;
import uk.gov.tfl.api.client.client.model.Mode;
import uk.gov.tfl.api.client.client.model.Place;
import uk.gov.tfl.api.client.client.model.Prediction;
import uk.gov.tfl.api.client.client.model.SearchResponse;
import uk.gov.tfl.api.client.client.model.StopPoint;
import uk.gov.tfl.api.client.client.model.StopPointCategory;
import uk.gov.tfl.api.client.client.model.StopPointRouteSection;
import uk.gov.tfl.api.client.client.model.StopPointsResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for StopPointApi
 */
@Ignore
public class StopPointApiTest {

    private final StopPointApi api = new StopPointApi();

    
    /**
     * Gets the list of arrival predictions for the given stop point id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointArrivalsTest() throws ApiException {
        String id = null;
        List<Prediction> response = api.stopPointArrivals(id);

        // TODO: test validations
    }
    
    /**
     * Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointCrowdingTest() throws ApiException {
        String id = null;
        String line = null;
        String direction = null;
        List<StopPoint> response = api.stopPointCrowding(id, line, direction);

        // TODO: test validations
    }
    
    /**
     * Returns the canonical direction, \&quot;inbound\&quot; or \&quot;outbound\&quot;, for a given pair of stop point Ids in the direction from -&amp;gt; to.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointDirectionTest() throws ApiException {
        String id = null;
        String toStopPointId = null;
        String lineId = null;
        String response = api.stopPointDirection(id, toStopPointId, lineId);

        // TODO: test validations
    }
    
    /**
     * Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointDisruptionTest() throws ApiException {
        List<String> ids = null;
        Boolean getFamily = null;
        Boolean includeRouteBlockedStops = null;
        Boolean flattenResponse = null;
        List<DisruptedPoint> response = api.stopPointDisruption(ids, getFamily, includeRouteBlockedStops, flattenResponse);

        // TODO: test validations
    }
    
    /**
     * Gets a distinct list of disrupted stop points for the given modes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointDisruptionByModeTest() throws ApiException {
        List<String> modes = null;
        Boolean includeRouteBlockedStops = null;
        List<DisruptedPoint> response = api.stopPointDisruptionByMode(modes, includeRouteBlockedStops);

        // TODO: test validations
    }
    
    /**
     * Gets a list of StopPoints corresponding to the given list of stop ids.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointGetTest() throws ApiException {
        List<String> ids = null;
        Boolean includeCrowdingData = null;
        List<StopPoint> response = api.stopPointGet(ids, includeCrowdingData);

        // TODO: test validations
    }
    
    /**
     * Gets a list of StopPoints within {radius} by the specified criteria
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointGetByGeoPointTest() throws ApiException {
        List<String> stopTypes = null;
        Double locationLat = null;
        Double locationLon = null;
        Integer radius = null;
        Boolean useStopPointHierarchy = null;
        List<String> modes = null;
        List<String> categories = null;
        Boolean returnLines = null;
        StopPointsResponse response = api.stopPointGetByGeoPoint(stopTypes, locationLat, locationLon, radius, useStopPointHierarchy, modes, categories, returnLines);

        // TODO: test validations
    }
    
    /**
     * Gets a list of StopPoints filtered by the modes available at that StopPoint.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointGetByModeTest() throws ApiException {
        List<String> modes = null;
        Integer page = null;
        StopPointsResponse response = api.stopPointGetByMode(modes, page);

        // TODO: test validations
    }
    
    /**
     * Gets a StopPoint for a given sms code.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointGetBySmsTest() throws ApiException {
        String id = null;
        String output = null;
        Object response = api.stopPointGetBySms(id, output);

        // TODO: test validations
    }
    
    /**
     * Gets all stop points of a given type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointGetByTypeTest() throws ApiException {
        List<String> types = null;
        List<StopPoint> response = api.stopPointGetByType(types);

        // TODO: test validations
    }
    
    /**
     * Get car parks corresponding to the given stop point id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointGetCarParksByIdTest() throws ApiException {
        String stopPointId = null;
        List<Place> response = api.stopPointGetCarParksById(stopPointId);

        // TODO: test validations
    }
    
    /**
     * Gets the service types for a given stoppoint
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointGetServiceTypesTest() throws ApiException {
        String id = null;
        List<String> lineIds = null;
        List<String> modes = null;
        List<LineServiceType> response = api.stopPointGetServiceTypes(id, lineIds, modes);

        // TODO: test validations
    }
    
    /**
     * Gets a list of taxi ranks corresponding to the given stop point id.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointGetTaxiRanksByIdsTest() throws ApiException {
        String stopPointId = null;
        List<Place> response = api.stopPointGetTaxiRanksByIds(stopPointId);

        // TODO: test validations
    }
    
    /**
     * Get a list of places corresponding to a given id and place types.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointGet_0Test() throws ApiException {
        String id = null;
        List<String> placeTypes = null;
        List<Place> response = api.stopPointGet_0(id, placeTypes);

        // TODO: test validations
    }
    
    /**
     * Gets the list of available StopPoint additional information categories
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointMetaCategoriesTest() throws ApiException {
        List<StopPointCategory> response = api.stopPointMetaCategories();

        // TODO: test validations
    }
    
    /**
     * Gets the list of available StopPoint modes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointMetaModesTest() throws ApiException {
        List<Mode> response = api.stopPointMetaModes();

        // TODO: test validations
    }
    
    /**
     * Gets the list of available StopPoint types
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointMetaStopTypesTest() throws ApiException {
        List<String> response = api.stopPointMetaStopTypes();

        // TODO: test validations
    }
    
    /**
     * Gets Stopoints that are reachable from a station/line combination.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointReachableFromTest() throws ApiException {
        String id = null;
        String lineId = null;
        List<String> serviceTypes = null;
        List<StopPoint> response = api.stopPointReachableFrom(id, lineId, serviceTypes);

        // TODO: test validations
    }
    
    /**
     * Returns the route sections for all the lines that service the given stop point ids
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointRouteTest() throws ApiException {
        String id = null;
        List<String> serviceTypes = null;
        List<StopPointRouteSection> response = api.stopPointRoute(id, serviceTypes);

        // TODO: test validations
    }
    
    /**
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointSearchTest() throws ApiException {
        String query = null;
        List<String> modes = null;
        Boolean faresOnly = null;
        Integer maxResults = null;
        List<String> lines = null;
        Boolean includeHubs = null;
        Boolean tflOperatedNationalRailStationsOnly = null;
        SearchResponse response = api.stopPointSearch(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly);

        // TODO: test validations
    }
    
    /**
     * Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopPointSearch_0Test() throws ApiException {
        String query = null;
        List<String> modes = null;
        Boolean faresOnly = null;
        Integer maxResults = null;
        List<String> lines = null;
        Boolean includeHubs = null;
        Boolean tflOperatedNationalRailStationsOnly = null;
        SearchResponse response = api.stopPointSearch_0(query, modes, faresOnly, maxResults, lines, includeHubs, tflOperatedNationalRailStationsOnly);

        // TODO: test validations
    }
    
}
